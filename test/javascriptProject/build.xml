<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project name="testModifyProperties">
  
  <!-- define the dependency resolver, maven-settings -->
  <property name="maven.artifactory.source.url" value="http://localhost:6666/notavailable" />
  <property name="maven.artifactory.target.url" value="http://localhost:6666/notavailable" />
  <property name="maven.repository.source.local" value="repo" />
  <property name="maven.repository.target.local" value="repo" />
  
  <!-- define the main-class for the test-project -->
  <property name="build.launcher.mainClass" value="main" />
  
  <!-- add the JavaScript library -->
  <property name="main.import.library.javascript" value="true" />

  <!-- use the default settings 
  <property name="main.config.location" value="./../../../_settings/ant" />
  -->
	<import file="..\..\resources\ant\library_main.xml"/>

  <var name="test.js.tmp.envdir" value="_envTest" />
  
  <macrodef name="testIndexHtmlCreation">
    <sequential>
      <fileCleanUp dir="${test.js.tmp.envdir}" recreate="false" />
    
      <!-- just run the default -->
      <javascriptCopyIndexHtml resourcedir="${test.js.tmp.envdir}" />
      
      <!-- make sure the file was generated -->
      <if>
        <not><available file="${test.js.tmp.envdir}/index.html" /></not>
        <then>
          <fail>The 'index.html' was not created.</fail>
        </then>
      </if>
      
      <!-- check the content of the file -->
      <var name="test.tmp.indexFileContent" unset="true" />
      <loadfile property="test.tmp.indexFileContent" srcfile="${test.js.tmp.envdir}/index.html"/>

      <!-- the expected file -->
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="\Q&lt;title&gt;net-meisen-js-web-testsample (net-meisen-js-web-testsample)&lt;/title&gt;\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <not><matches string="${test.tmp.indexFileContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expected index.html failed - ${test.tmp.indexFileContent}!</fail></then>
      </if>
      
      <!-- delete the file and create an empty file -->
      <fileCleanUp file="${test.js.tmp.envdir}/index.html" recreate="false" />
      <echo file="${test.js.tmp.envdir}/index.html" append="false"></echo>
      
      <!-- run again -->
      <javascriptCopyIndexHtml resourcedir="${test.js.tmp.envdir}" />
      
      <!-- check the content of the file -->
      <var name="test.tmp.indexFileContent" unset="true" />
      <loadfile property="test.tmp.indexFileContent" srcfile="${test.js.tmp.envdir}/index.html"/>
      
      <!-- the expected file -->
      <var name="test.tmp.regex" value="^\s*$" />
      <if>
        <not><matches string="${test.tmp.indexFileContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expected empty index.html failed - ${test.tmp.indexFileContent}!</fail></then>
      </if>
      
      <!-- cleanUp -->
      <fileCleanUp dir="${test.js.tmp.envdir}" recreate="false" />
    </sequential>
  </macrodef>
  
  <macrodef name="testGeneratedDependencies">
    <sequential>
    
      <!-- just run the default -->
      <javascriptCreateDependenciesDir scriptsDir="${test.js.tmp.envdir}/${javascript.server.scripts.dir}" />
      
      <!-- make sure the correct amount of dependencies was resolved -->
      <if>
        <resourcecount when="ne" count="2">
          <fileset dir="${test.js.tmp.envdir}/${javascript.server.scripts.dir}">
            <include name="**/*" />
          </fileset>
        </resourcecount>
        <then><fail>The expected dependencies weren't resolved.</fail></then>
      </if>
      
      <!-- make sure the correct dependency was selected -->
      <if>
        <resourcecount when="eq" count="1">
          <fileset dir="${test.js.tmp.envdir}/${javascript.server.scripts.dir}">
            <include name="require.js" />
          </fileset>
        </resourcecount>
        <then><echo>testGeneratedDependencies was successful!</echo></then>
        <else><fail>The require.js dependency wasn't found.</fail></else>
      </if>
      <if>
        <resourcecount when="eq" count="1">
          <fileset dir="${test.js.tmp.envdir}/${javascript.server.scripts.dir}">
            <include name="three.js" />
          </fileset>
        </resourcecount>
        <then><echo>testGeneratedDependencies was successful!</echo></then>
        <else><fail>The three.js dependency wasn't found.</fail></else>
      </if>
      
      <!-- cleanUp -->
      <fileCleanUp dir="${test.js.tmp.envdir}" recreate="false" />
    </sequential>
  </macrodef>
  
  <macrodef name="testGeneratedTests">
    <sequential>
    
      <!-- just run the default -->
      <javascriptCreateTestDir testDir="${test.js.tmp.envdir}/${javascript.test.dir}" />
      
      <!-- make sure the file was generated -->
      <if>
        <not><available file="${test.js.tmp.envdir}/${javascript.test.dir}/${javascript.test.js}" /></not>
        <then>
          <fail>The expected generated file could not be found at '${test.js.tmp.envdir}/${javascript.test.dir}/${javascript.test.js}'.</fail>
        </then>
      </if>
      
      <!-- check the content of the file -->
      <var name="test.tmp.jsFileContent" unset="true" />
      <loadfile property="test.tmp.jsFileContent" srcfile="${test.js.tmp.envdir}/${javascript.test.dir}/${javascript.test.js}"/>

      <!-- the expected dependencies -->
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q depScriptList: ['${javascript.server.scripts.dir}/jquery.js','${javascript.server.scripts.dir}/qunit.js','${javascript.server.scripts.dir}/require.js','${javascript.server.scripts.dir}/three.js'],\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <not><matches string="${test.tmp.jsFileContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expectedDependencies failed - ${test.tmp.jsFileContent}!</fail></then>
      </if>
      
      <!-- the expected tests -->
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q testScriptList: ['${javascript.server.scripts.dir}/${javascript.server.tests.dir}/testWithRequire.js','${javascript.server.scripts.dir}/${javascript.server.tests.dir}/testWithoutRequire.js'],\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <not><matches string="${test.tmp.jsFileContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expectedTests failed - ${test.tmp.jsFileContent}!</fail></then>
      </if>
      
      <!-- the expected sources -->
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q srcScriptList: ['${javascript.server.scripts.dir}/main.js','${javascript.server.scripts.dir}/source.js','${javascript.server.scripts.dir}/subfolder/source.js','${javascript.server.scripts.dir}/subfolder/subfolder/source.js'],\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <matches string="${test.tmp.jsFileContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" />
        <then><echo>testGeneratedTests was successful!</echo></then>
        <else><fail>expectedSources failed - ${test.tmp.jsFileContent}!</fail></else>
      </if>
      
      <!-- check if the server can be identifier -->
      <if>
        <isset property="javascript.test.currentId" />
        <then><echo>javascript.test.currentId was set successfully!</echo></then>
        <else><fail>javascript.test.currentId not set!</fail></else>
      </if>
      <if>
        <not><available file="${test.js.tmp.envdir}/${javascript.test.dir}/${javascript.test.currentId}" /></not>
        <then>
          <fail>The expected generated file could not be found at '${test.js.tmp.envdir}/${javascript.test.dir}/${javascript.test.currentId}'.</fail>
        </then>
      </if>
      
      <!-- cleanUp -->
      <fileCleanUp dir="${test.js.tmp.envdir}" recreate="false" />
    </sequential>
  </macrodef>
  
  <macrodef name="testGeneratedTestToolDirectory">
    <sequential>
    
      <!-- first test use default and disable auto-detection -->
      <var name="javascript.test.requireconfig.override" value="false" />
      <javascriptCreateTestToolDir testToolDir="${test.js.tmp.envdir}/${javascript.testtool.dir}" />
      
      <var name="test.tmp.indexContent" unset="true" />
      <loadfile property="test.tmp.indexContent" srcfile="${test.js.tmp.envdir}/${javascript.testtool.dir}/index.html"/>
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Qrequire.config(${javascript.test.requireconfig});\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <not><matches string="${test.tmp.indexContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expectedRequireConfig failed - ${test.tmp.indexContent}!</fail></then>
      </if>
      
      <!-- read the content of the application's file -->
      <var name="javascript.test.requireconfig.override" value="true" />
      <javascriptCreateTestToolDir testToolDir="${test.js.tmp.envdir}/${javascript.testtool.dir}" />
      <var name="test.tmp.indexContent" unset="true" />
      <loadfile property="test.tmp.indexContent" srcfile="${test.js.tmp.envdir}/${javascript.testtool.dir}/index.html"/>
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Qrequire.config({\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q// define the baseUrl defined by the processenabler\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\QbaseUrl: '${javascript.server.scripts.dir}',\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q// add some test-function for the testcase\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\QtestFunction: function(a, b) { return a + (a * b); },\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q// shim three.js it's not AMD conform\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Qshim: { 'three': { exports: 'THREE' }}\E" />     
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Q});\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <not><matches string="${test.tmp.indexContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expectedRequireConfig failed - ${test.tmp.indexContent}!</fail></then>
      </if>
      
      <!-- disable override and set the configuration using a property -->
      <var name="javascript.test.requireconfig.override" value="false" />
      <var name="javascript.test.requireconfig" value="{ myown: 'sample' }" />
      <javascriptCreateTestToolDir testToolDir="${test.js.tmp.envdir}/${javascript.testtool.dir}" />
      <var name="test.tmp.indexContent" unset="true" />
      <loadfile property="test.tmp.indexContent" srcfile="${test.js.tmp.envdir}/${javascript.testtool.dir}/index.html"/>
      <var name="test.tmp.regex" value="^.*" />
      <var name="test.tmp.regex" value="${test.tmp.regex}\s*\Qrequire.config(${javascript.test.requireconfig});\E" />
      <var name="test.tmp.regex" value="${test.tmp.regex}.*$" />
      <if>
        <not><matches string="${test.tmp.indexContent}" pattern="${test.tmp.regex}" multiline="true" singleline="true" /></not>
        <then><fail>expectedRequireConfig failed - ${test.tmp.indexContent}!</fail></then>
      </if>
      
      <!-- cleanUp -->
      <fileCleanUp dir="${test.js.tmp.envdir}" recreate="false" />
    </sequential>
  </macrodef>
    
  <target name="antTest">
    <testIndexHtmlCreation />
    <testGeneratedDependencies />
    <testGeneratedTests />
    <testGeneratedTestToolDirectory />
  </target>
  
  <target name="antTestCleanUp">

    <!-- do the default cleanup -->
    <antcall target="cleanUp" inheritAll="true" inheritRefs="true" />
    
    <!-- remove additional files -->
    <fileCleanUp dir="${build.dir}" recreate="false" />
    <fileCleanUp dir="${test.dir}" recreate="false" />
  </target>
</project>
