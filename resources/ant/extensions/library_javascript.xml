<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project name="library_javascript" >
  <property name="javascript.library.version" value="1.0.3" description="The current version of the library" />
  <dirname property="library_javascript.basedir" file="${ant.file.library_javascript}" />
    
  <property name="javascript.library.resfile.serverSettings" location="${library_javascript.basedir}/library_javascript-serverSettings.xml" description="The settings for the server to be used" />
  <property name="javascript.library.resfile.testJs" location="${library_javascript.basedir}/library_javascript-test.js" description="JavaScript which is a template for the generated one, containing all tests defined for the project" />
  <property name="javascript.library.resfile.lib_indexHtml" location="${library_javascript.basedir}/library_javascript_lib-index.html" description="Sample index.html for libraries, which can be used to test a library" />
  <property name="javascript.library.resfile.app_indexHtml" location="${library_javascript.basedir}/library_javascript_app-index.html" description="Sample index.html for applications, which can be used as entry-point" />
  <property name="javascript.library.resfile.testToolZip" location="${main.root}/qunit/qunit-1.12.0.zip" description="Default tool used to run tests for JavaScripts" />
  <property name="javascript.library.resfile.optimizerZip" location="${main.root}/optimizerjs/r-2.1.11.zip" description="Default tool used to optimize the project" />
  <property name="javascript.library.resfile.optimizerLibConfig" location="${main.root}/optimizerjs/defaultLibConfig.js" description="Default tool used to optimize the project" />
  <property name="javascript.library.resfile.optimizerAppConfig" location="${main.root}/optimizerjs/defaultAppConfig.js" description="Default tool used to optimize the project" />
  <property name="javascript.library.resfile.phantomJsTestScript" location="${main.root}/phantomjs/qunit-phantomjs-runner-2013.03.28.js" description="Default phantomjs script to test QUnit tests" />
  
  <property name="javascript.testtool" value="${javascript.library.resfile.testToolZip}" description="The tool to be used for testing, has to be a zip-archive" />
  <property name="javascript.testbrowser.executable" value="phantomjs" description="The platform to execute the tests on" />
  <property name="javascript.testbrowser.arguments" value="${javascript.library.resfile.phantomJsTestScript}" description="Arguments passed to the executable" />
  
  <property name="javascript.optimizer" value="${javascript.library.resfile.optimizerZip}" description="The tool to be used for optimization, has to be a zip-archive" />
  <property name="javascript.optimizer.lib-config" value="${javascript.library.resfile.optimizerLibConfig}" description="The configuration file used to optimize the project" />
  <property name="javascript.optimizer.app-config" value="${javascript.library.resfile.optimizerAppConfig}" description="The configuration file used to optimize the project" />
  <property name="javascript.optimizer.executable" value="node" description="The executable used to optimize the project" />
  <property name="javascript.optimizer.arguments" value="[[javascript.optimizer.tool]]/r.js -o [[javascript.optimizer.config]]" description="Arguments passed to the executable, the string [[javascript.optimizer.config]] will be replaced by the full location of the created configuration file, the string [[javascript.optimizer.tool]] will be replaced with the location of the optimizer-tool" />
  <property name="javascript.optimizer.type" value="uglify" description="The type of optimization to be used, only use 'uglify' or 'none'." />
  
  <property name="javascript.server.controlport" value="9000" description="The port to start the control of the server on" />
  <property name="javascript.server.httpport" value="10000" description="The port to start the http server on" />
  <property name="javascript.server.scripts.dir" value="scripts" description="The folder within the url to look for scripts" />
  <property name="javascript.server.tests.dir" value="tests" description="The folder within the url to look for tests" />
  <property name="javascript.server.testtool.dir" value="testtool" description="The folder within the url to look for the test-tool" />
  <property name="javascript.server.runtest" value="runTests" description="The folder within the url to trigger tests" />
  <property name="javascript.server.pom" location="pomServer.xml" description="The location of the dependencies used for the server" />
  <property name="javascript.server.settings" value="${javascript.library.resfile.serverSettings}" description="The location of file used to configure the server" />
  
  <property name="javascript.srv.dir" value="_srv" description="Server directory" />
  <property name="javascript.serverdep.dir" value="libs" description="Directory on server side which contains additional dependencies" />
  <property name="javascript.scripts.dir" value="scripts" description="Directory on server side which contains all scripts (combines several directories on the file-systems)" />
  <property name="javascript.test.dir" value="test" description="Directory to keep generated information while testing" />
  <property name="javascript.testtool.dir" value="testtool" description="Directory to store stuff for testing" />
  <property name="javascript.optimizer.dir" value="optimizer" description="Directory to store stuff for optimization" />
  <property name="javascript.optimizerDir" value="${build.dir}/${javascript.optimizer.dir}" description="The location of optimized files" />
  
  <property name="javascript.srvdir" location="${javascript.srv.dir}" description="Directory for files only needed by the environment" />
  <property name="javascript.serverdepdir" location="${javascript.srvdir}/${javascript.serverdep.dir}" description="Directory for additional libraries added to the server" />
  <property name="javascript.depdir" location="${javascript.srvdir}/${javascript.scripts.dir}" description="Directory for files only needed by the environment" />
  <property name="javascript.testdir" location="${javascript.srvdir}/${javascript.test.dir}" description="Directory for files only needed by the test-environment" />
  <property name="javascript.testtooldir" location="${javascript.srvdir}/${javascript.testtool.dir}" description="Directory for files of the test-tool" />
  
  <property name="javascript.dep.js" value="generated-depMap.js" description="The name of the file which is created containing definitions for all dependencies" />
  
  <property name="javascript.test.js" value="generated-testMap.js" description="The name of the file which is created containing definitions for all dependencies" />
  <property name="javascript.test.var" value="antProcessenablerTest" description="The name of the global variable defined in the test script containing test information, i.e. the test scripts" />
  <property name="javascript.test.requireconfig" value="{ baseUrl: '${javascript.server.scripts.dir}' }" description="The default configuration used for require within a test." />
  <property name="javascript.test.requireconfig.override" value="true" description="Determines if the ${javascript.test.requireconfig} should be overriden, i.e. by default or application config." />
  
  <property name="javascript.devenv.createIndexHtml" value="true" description="Defines if a sample index.html should be created, in the case that one does not exist so far." />
  
  <property name="build.pack.default.excludes" value="**/*.js" description="Defines whatever has to be excluded from a jar by default" />
  
  <!--
    This method is used to resolve dependencies of the server, which might be added to load additional server
    properties
      
    @param serverDependencyDir
      the directory the dependencies of the server can be found in, those are copied there by <i>createDevEnv</i>
    @param serverPomFile
      the file defining additional or the dependencies of the server
      
    @fails 
      <ul>
        <li>if one of the dependencies cannot be resolved</li>
      </ul>
            
    @author Philipp Meisen
    @since 1.0.2
  -->
  <macrodef name="javascriptResolveServerDependencies">
    <attribute name="serverDependencyDir" default="${javascript.serverdepdir}" />
    <attribute name="serverPomFile" default="${javascript.server.pom}" />
    
    <sequential>
    
      <trycatch property="javascript.tmp.error">
        <try>
        
          <!-- cleanUp the directory -->
          <fileCleanUp dir="@{serverDependencyDir}" recreate="true" />
          
          <!-- resolve the dependencies -->
          <mavenCopyDependencies dir="@{serverDependencyDir}" pomfile="@{serverPomFile}" scope="test" />
        </try>
        <catch>
          <echo level="warning">Unable to reload the server-dependencies: ${javascript.tmp.error}</echo>
        </catch>
      </trycatch>
      
    </sequential>
  </macrodef>
  
  <!--
    This method is used to start a server which provides the files of the project to a browser. If the environment changes, 
    i.e. the pom-file is modified, the <a href="#target_createDevEnv">createDevEnv</a> should be called. 
    
    @param httpPort
      the port of the http-server to be started
    @param controlPort
      the server's control-port, i.e. the port the server is controlled (e.g. shut-down) through
    @param serverDependencyDir
      the directory the dependencies of the server can be found in, those are copied there by <i>createDevEnv</i>
    @param serverSettings
      the file containing the settings of the server
    @param dependencyDir
      the directory the dependencies can be found in, those are copied there by <i>createDevEnv</i>
    @param resourceDir
      the directory other web-resources can be found in, e.g. html or css files
    @param srcDir
      the directory which contains the sources
    @param testDir
      the directory which contains the test-information
    @param testsDir
      the directory which contains the tests
    @param testtoolDir
      the directory which contains the test-tool 
      
    @fails 
      <ul>
        <li>if one of the ports is blocked</li>
        <li>if one of the directories cannot be accessed</li>
      </ul>
            
    @author Philipp Meisen
    @since 1.0.0
  -->
  <macrodef name="javascriptStartServer">
    <attribute name="httpPort" default="${javascript.server.httpport}" />
    <attribute name="controlPort" default="${javascript.server.controlport}" />
    
    <attribute name="serverDependencyDir" default="${javascript.serverdepdir}" />
    <attribute name="serverSettings" default="${javascript.server.settings}" />
  
    <attribute name="dependencyDir" default="${javascript.depdir}" />
    <attribute name="resourceDir" default="${build.resourcedir}" />
    <attribute name="srcDir" default="${build.srcdir}" />
    <attribute name="testDir" default="${javascript.testdir}" />
    <attribute name="testsDir" default="${test.srcdir}" />
    <attribute name="testtoolDir" default="${javascript.testtooldir}" />
    
    <attribute name="timeout" default="5000" />

    <element name="task" />
  
    <sequential>
      <var name="javascript.tmp.depDir" value="@{dependencyDir}" />
      <var name="javascript.tmp.resDir" value="@{resourceDir}" />
      <var name="javascript.tmp.srcDir" value="@{srcDir}" />
      <var name="javascript.tmp.testDir" value="@{testDir}" />
      <var name="javascript.tmp.testsDir" value="@{testsDir}" />
      <var name="javascript.tmp.testtoolDir" value="@{testtoolDir}" />
      
      <!-- define the set of dependencies -->
      <fileset id="javascript.tmp.addLibrary" dir="@{serverDependencyDir}">
        <include name="**/*.jar"/>
      </fileset>
      
      <parallel>
      
        <!-- start the server -->
        <serverGenericStart port="@{controlPort}" appPort="@{httpPort}" classpathId="javascript.tmp.addLibrary"
                            appServerSettings="@{serverSettings}" />
        
        <sequential>

          <!-- wait for the server -->
          <serverGenericWait port="@{httpPort}" timeout="@{timeout}" />

          <task />
             
          <!-- shutdown the server -->
          
        </sequential>
      </parallel>

    </sequential>
  </macrodef>
  
  <!--
    This method is used to shutdown the started server.
    
    @param port
      the server's control-port, i.e. the port the server is controlled (e.g. shut-down) through
    
    @author Philipp Meisen
    @since 1.0.0
  -->
  <macrodef name="javascriptStopServer">
    <attribute name="controlPort" default="${javascript.server.controlport}" />
    
    <sequential>
      <serverGenericStop port="@{controlPort}" />
    </sequential>
  </macrodef>
    
  <!--
    This method is used to create a dependencies' directory on the server, which contains all the resolved dependencies 
    (i.e. equal to the _eclipse directory created when working with a Java-project).
    
    @param scriptsDir
      the directory in which the dependencies should be placed
      
    @fails 
      <ul>
        <li>if on of the defined dependencies cannot be resolved</li>
        <li>if the specified <i>scriptsDir</i> cannot be accessed or created</li>
      </ul>
            
    @author Philipp Meisen
    @since 1.0.0
  -->
  <macrodef name="javascriptCreateDependenciesDir">
    <attribute name="scriptsDir" default="${javascript.depdir}" />
  
    <sequential>
    
      <!-- cleanUp the directory -->
      <fileCleanUp dir="@{scriptsDir}" recreate="true" />
      
      <!-- create the other structure -->
      <mkdir dir="${build.srcdir}" />
      <mkdir dir="${build.resourcedir}" />
      <mkdir dir="${test.srcdir}" />
      
      <!-- resolve the dependencies -->
      <mavenResolveDependencies fileset="javascript.tmp.deps" />
      <for param="javascript.tmp.dependency">
        <path>
          <fileset refid="javascript.tmp.deps" />
        </path>
        <sequential>
          <unzip src="@{javascript.tmp.dependency}" dest="@{scriptsDir}">
            <patternset>
              <exclude name="META-INF,META-INF/**/*"/>
            </patternset>
          </unzip>
        </sequential>
      </for>
    </sequential>
  </macrodef>
  
  <!--
    This method is used to copy a sample index.html file into the resource directory of the project. The 
    file is only copied if no index.html exists so far and if the 
    <a href="#property_javascript.devenv.createIndexHtml">javascript.devenv.createIndexHtml</a> property
    is set to true.
    
    @param resourcedir
      the directory which is to be assumed the resource directory of the project
            
    @author Philipp Meisen
    @since 1.0.1
  -->
  <macrodef name="javascriptCopyIndexHtml">
    <attribute name="resourcedir" default="${build.resourcedir}" />
    
    <sequential>
      <if>
        <and>
          <not><available file="@{resourcedir}/index.html" /></not>
          <or>
            <equals arg1="${javascript.devenv.createIndexHtml}" arg2="true" />
            <equals arg1="${javascript.devenv.createIndexHtml}" arg2="y" />
            <equals arg1="${javascript.devenv.createIndexHtml}" arg2="yes" />
          </or>
        </and>
        <then>
          <mavenSetPom />
          
          <if>
            <and>
              <isset property="build.launcher.mainClass" />
              <not><equals arg1="${build.launcher.mainClass}" arg2="" /></not>
            </and>
            <then>
              <transformPackagesToPath property="javascript.tmp.appPath" 
                                       packages="${build.launcher.mainClass}" suffix="" packageSeparatore="/" separatore="," />
              <fileReplaceAllProperties file="${javascript.library.resfile.app_indexHtml}" destFile="@{resourcedir}/index.html" force="true" />
            </then>
            <else>
              <fileReplaceAllProperties file="${javascript.library.resfile.lib_indexHtml}" destFile="@{resourcedir}/index.html" force="true" />
            </else>
          </if>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="javascriptCreateTestDir">
    <attribute name="testDir" default="${javascript.testdir}" />
  
    <sequential>
    
      <!-- cleanUp the directory -->
      <fileCleanUp dir="@{testDir}" recreate="true" />
      
      <!-- create the list of all the dependencies -->
      <mavenResolveDependencies fileset="javascript.tmp.deps" scope="test" />
      <for param="javascript.tmp.dependency">
        <path>
          <fileset refid="javascript.tmp.deps" />
        </path>
        <sequential>
          <unzip src="@{javascript.tmp.dependency}" dest="@{testDir}"/>
        </sequential>
      </for>
      <fileset id="javascript.tmp.depFiles" dir="@{testDir}">
        <include name="**/*.js" />
      </fileset>
      
      <varLocation property="javascript.tmp.testdir" value="@{testDir}" />
      <createResourceList property="javascript.tmp.depList" resourceCollectionId="javascript.tmp.depFiles" separatore=",">
        <mapper>
          <chainedmapper>
            <globmapper from="${javascript.tmp.testdir}/*" to="'${javascript.server.scripts.dir}/*'" handledirsep="true" />
            <scriptmapper language="javascript">
               self.addMappedName(source.replace(/\\/g, '/'));
            </scriptmapper>
          </chainedmapper>
        </mapper>
      </createResourceList>
      
      <!-- create the list of all the sources -->
      <fileset id="javascript.tmp.srcFiles" dir="${build.srcdir}">
        <include name="**/*.js" />
      </fileset>
      <createResourceList property="javascript.tmp.srcList" resourceCollectionId="javascript.tmp.srcFiles" separatore=",">
        <mapper>
          <chainedmapper>
            <globmapper from="${build.srcdir}/*" to="'${javascript.server.scripts.dir}/*'" handledirsep="true" />
            <scriptmapper language="javascript">
              self.addMappedName(source.replace(/\\/g, '/'));
            </scriptmapper>
          </chainedmapper>
        </mapper>
      </createResourceList>
      
      <!-- create the list of all the tests -->
      <fileset id="javascript.tmp.testFiles" dir="${test.srcdir}">
        <include name="**/*.js" />
      </fileset>
      <createResourceList property="javascript.tmp.testList" resourceCollectionId="javascript.tmp.testFiles" separatore=",">
        <mapper>
          <chainedmapper>
            <globmapper from="${test.srcdir}/*" to="'${javascript.server.scripts.dir}/${javascript.server.tests.dir}/*'" handledirsep="true" />
            <scriptmapper language="javascript">
              self.addMappedName(source.replace(/\\/g, '/'));
            </scriptmapper>
          </chainedmapper>
        </mapper>
      </createResourceList>
      
      <!-- replace the properties in the file to be generated -->
      <fileReplaceAllProperties file="${javascript.library.resfile.testJs}" destFile="@{testDir}/${javascript.test.js}" force="true" />
      
      <!-- create another file which identifies this server for this session, not that another server is running somewhere -->
      <generateUUID property="javascript.test.currentId" />
      <touch file="@{testDir}/${javascript.test.currentId}"/>
    </sequential>
  </macrodef>
  
  <!--
    This method is used to create a directory for the test-tool on the server. This can be compared to junit which
    is delivered with almost all environments.<br/>Since version 1.0.3 the method sets a property called javascript.tmp.test.requireconfig.
    The content of the property is controlled by the properties <a href="#property_javascript.test.requireconfig.override">javascript.test.requireconfig.override</a> 
    and <a href="#property_javascript.test.requireconfig">javascript.test.requireconfig</a>. If the override-property is set to 'true',
    the processenabler will check the main-class (defined by <a href="#property_build.launcher.mainClass">build.launcher.mainClass</a>) for a
    require-configuration. If one is found the content fo the property javascript.tmp.test.requireconfig will be the defined require-configuration's object.
    If none is defined, the value of the property will be used (which is also the case if the override-property is set to 'false'.
    
    @param testToolDir
      the directory in which the test-tool should be created
      
    @fails 
      <ul>
        <li>if the test-tool cannot be found</li>
        <li>if the specified test-tool isn't a archive</li>
        
      </ul>
            
    @author Philipp Meisen
    @since 1.0.0
  -->
  <macrodef name="javascriptCreateTestToolDir">
    <attribute name="testToolDir" default="${javascript.testtooldir}" />
  
    <sequential>
    
      <!-- cleanUp the directory -->
      <fileCleanUp dir="@{testToolDir}" recreate="true" />
      
      <!-- check for the test-tool -->
      <if>
        <not><available file="${javascript.testtool}" /></not>
        <then>
          <fail>Cannot find or access the '${javascript.testtool}' archive which is defined to be used as test-tool</fail>
        </then>
      </if>
      
      <!-- create the correct require.config, which might be needed by the testtool -->
      <varNormalizeBoolean property="javascript.tmp.test.requireconfig.override" value="${javascript.test.requireconfig.override}" />
      <var name="javascript.tmp.test.requireconfig" unset="true" />
      <if>
        <equals arg1="${javascript.tmp.test.requireconfig.override}" arg2="true" />
        <then>

          <!-- check if we have a application which might override the configuration -->
          <if>
            <and>
              <isset property="build.launcher.mainClass" />
              <not><equals arg1="${build.launcher.mainClass}" arg2="" /></not>
            </and>
            <then>
            
              <!-- get the file of the application -->
              <transformPackagesToPath property="javascript.tmp.appPath" 
                                       packages="${build.launcher.mainClass}" suffix=".js" packageSeparatore="/" separatore="," />
              <var name="javascript.tmp.fullAppPath" value="${build.srcdir}/${javascript.tmp.appPath}" />
              
              <!-- load the content of the file -->
              <var name="javascript.tmp.test.fileContent" unset="true" />
              <loadfile property="javascript.tmp.test.fileContent" srcfile="${javascript.tmp.fullAppPath}"/>
              
              <!-- get the configuration from the content -->
              <script language="javascript"><![CDATA[
                var setProperty = project.createTask("var");
                var content = project.getProperty("javascript.tmp.test.fileContent");

                var regex = "require(?:js)\\.config\\(\\s*(\\{)";
                var pattern = java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.MULTILINE	| 
                                                                     java.util.regex.Pattern.DOTALL);
                var matcher = pattern.matcher(content);
                var pos = -1;
                if (matcher.find() && (pos = matcher.start(1)) != -1) {
                  
                  // iterate char by char and look for the configuration-object's end
                  var length = content.length();
                  var counter = 0;
                  for (var i = pos; i < length; i++) {
                    var c = content.substring(i, i + 1);
                    
                    if (c.equals("{")) {
                      counter++;
                    } else if (c.equals("}")) {
                      counter --;
                      if (counter == 0) {
                        break;
                      }
                    }
                  }
                  
                  // set the property
                  setProperty.setName("javascript.tmp.test.requireconfig");
                  setProperty.setValue(content.substring(pos, i + 1));
                  setProperty.execute();
                }
              ]]></script>
            </then>
          </if>
        </then>
      </if>
      
      <!-- if not set so far use the property -->
      <if>
        <not><isset property="javascript.tmp.test.requireconfig" /></not>
        <then><var name="javascript.tmp.test.requireconfig" value="${javascript.test.requireconfig}" /></then>
      </if>
      
      <!-- unzip and replace the properties -->
      <fileReplaceAllPropertiesInZip file="${javascript.testtool}" dest="@{testToolDir}" rezip="false" />
    </sequential>
  </macrodef>
    
  <!--
    This method is used to create a directory for the optimization-tool. The created directory can than be read using the 
    property javascript.tmp.optimizerToolDir.

    @param basedir
      the base directory to create a tool directory in and unzip the optimization tool to
    
    @fails 
      <ul>
        <li>if the optimization-tool cannot be found</li>
        <li>if the specified optimization-tool isn't a archive</li>
        <li>if the location cannot be accessed</li>
      </ul>
            
    @author Philipp Meisen
    @since 1.0.1
  -->
  <macrodef name="javascriptCreateOptimizerToolDir">
    <attribute name="basedir" default="${build.tmpdir}" />
    
    <sequential>
        
      <!-- cleanUp the directory -->
      <var name="javascript.tmp.optimizerToolDir" value="@{basedir}/tool" />
      <fileCleanUp dir="${javascript.tmp.optimizerToolDir}" recreate="true" />
      
      <!-- check for the optimizer -->
      <if>
        <not><available file="${javascript.optimizer}" /></not>
        <then>
          <fail>Cannot find or access the '${javascript.optimizer}' archive which is defined to be used as optimizer</fail>
        </then>
      </if>

      <!-- unzip and replace the properties -->
      <fileReplaceAllPropertiesInZip file="${javascript.optimizer}" dest="${javascript.tmp.optimizerToolDir}" rezip="false" />
    </sequential>
  </macrodef>
  
  <!--
    This method is used to create an optimized code. The method can build an application (i.e. code is wrapped to one
    JavaScript file) or a library (the different files of the package are uglified). The option depends on the passed mainClass. 
    If the mainClass is empty the method assumes that a library is build, otherwise an application is build. The final 
    directory with the code is stored within the property javascript.tmp.optimizerResultDir.

    @param basedir
      the base directory to create the optimized code
    @param mainClass
      the class of an application, if left empty a library will be build
                
    @author Philipp Meisen
    @since 1.0.1
  -->
  <macrodef name="javascriptOptimizer">
    <attribute name="basedir" default="${javascript.optimizerDir}" />
    <attribute name="mainClass" default="" />
    
    <sequential>
      <mavenSetPom />
    
      <replaceAndSetProperty property="javascript.tmp.basedir" value="@{basedir}" replace="\" replacement="/" />
      <fileCleanUp dir="${javascript.tmp.basedir}" recreate="true" />

      <!-- create the directory for the optimizer -->
      <javascriptCreateOptimizerToolDir basedir="${javascript.tmp.basedir}" />
      
      <!-- define some directories needed -->
      <var name="javascript.tmp.optimizerSourcesDir" value="${javascript.tmp.basedir}/sources" />
      <var name="javascript.tmp.optimizerResultDir" value="${javascript.tmp.basedir}/build" />
            
      <!-- decide if we have an application or a libraries to be optimized -->
      <var name="javascript.tmp.optimizerConfig" value="${javascript.tmp.basedir}/optimizerConfig.file" />
      <if>
        <equals arg1="@{mainClass}" arg2="" />
        <then>
          <var name="javascript.tmp.appPath" value="" />
          <var name="javascript.tmp.optimizer.config" value="${javascript.optimizer.lib-config}" />
        </then>
        <else>

          <!-- copy the dependent files -->
          <mavenResolveDependencies fileset="javascript.tmp.deps" scope="runtime" />
          <fileCallMacroForEach macro="buildMoveResource" parameters="resourceType=[[${build.resource.dependency}]];rootFolder=[[${javascript.tmp.optimizerSourcesDir}]];defaultLocation=[[${javascript.server.scripts.dir}]];defaultUnzip=[[true]];defaultExcludeFiles=[[META-INF,META-INF/**/*]]">
            <fileset refid="javascript.tmp.deps" />
          </fileCallMacroForEach>

          <!-- copy the resources -->
          <fileCallMacroForEach macro="buildMoveResource" parameters="resourceType=[[${build.resource.resource}]];rootFolder=[[${javascript.tmp.optimizerSourcesDir}]]">
            <fileset dir="${build.resourcedir}" />
          </fileCallMacroForEach>

          <!-- define the application -->
          <transformPackagesToPath property="javascript.tmp.appPath" 
                                   packages="${build.launcher.mainClass}" suffix="" packageSeparatore="/" separatore="," />
          <var name="javascript.tmp.optimizer.config" value="${javascript.optimizer.app-config}" />
        </else>
      </if>
      <fileReplaceAllProperties file="${javascript.tmp.optimizer.config}" destFile="${javascript.tmp.optimizerConfig}" force="true" />
      
      <!-- copy the sources -->
      <fileCallMacroForEach macro="buildMoveResource" parameters="resourceType=[[${build.resource.builtLibrary}]];rootFolder=[[${javascript.tmp.optimizerSourcesDir}]];defaultLocation=[[${javascript.server.scripts.dir}]]">
        <fileset dir="${build.srcdir}" />
      </fileCallMacroForEach>
            
      <!-- replace the values within the arguments -->
      <replaceAndSetProperty property="javascript.tmp.optimizer.arguments" value="${javascript.optimizer.arguments}" 
                             replace="[[javascript.optimizer.config]]" replacement="&quot;${javascript.tmp.optimizerConfig}&quot;" />
      <replaceAndSetProperty property="javascript.tmp.optimizer.arguments" value="${javascript.tmp.optimizer.arguments}" 
                             replace="[[javascript.optimizer.tool]]" replacement="&quot;${javascript.tmp.optimizerToolDir}&quot;" />

      <!-- create a file for the optimizer to be executed -->
      <echo file="${javascript.tmp.basedir}/optimize.bat" append="false">@echo off
"${javascript.optimizer.executable}" ${javascript.tmp.optimizer.arguments}
      </echo>
            
      <!-- run the optimization -->
      <var name="javascript.tmp.output" unset="true" />
      <var name="javascript.tmp.result" unset="true" />
      <exec executable="${javascript.tmp.basedir}/optimize.bat" failonerror="false" outputproperty="javascript.tmp.output" resultproperty="javascript.tmp.result" />     

      <!-- fail on exception -->
      <if>
        <or>
          <not><equals arg1="${javascript.tmp.result}" arg2="0" /></not>
          <contains string="${javascript.tmp.output}" substring="error:" casesensitive="false" />
        </or>
        <then><fail>${javascript.tmp.output}</fail></then>
      </if>
      
      <!-- now do some cleanup -->
      <for param="javascript.tmp.logfile">
        <path><fileset dir="${javascript.tmp.optimizerResultDir}" includes="build*.*,build,build_*.*,*.log" /></path>
        <sequential>
          <fileCleanUp file="@{javascript.tmp.logfile}" recreate="true" />
        </sequential>
      </for>

      <!-- add the scripts folder to the result, if it's a library -->
      <if>
        <equals arg1="@{mainClass}" arg2="" />
        <then>
          <var name="javascript.tmp.optimizerResultDir" value="${javascript.tmp.optimizerResultDir}/${javascript.server.scripts.dir}" />
        </then>
      </if>      
    </sequential>
  </macrodef>
    
  <macrodef name="javascriptTest">
    <sequential>
      
      <!--
        now start the test - the server might be running already,
        if so we just use it, otherwise start it
        -->
      <if>
        <and>
          <socket server="localhost" port="${javascript.server.httpport}"/>
          <socket server="localhost" port="${javascript.server.controlport}"/>
        </and>
        <!-- use the existing server, even if it might shutdown in between -->
        <then>
          
          <!-- check if it's the correct server -->
          <if>
            <http url="http://localhost:${javascript.server.httpport}/${javascript.server.scripts.dir}/${javascript.test.currentId}" />
            <then>
              <javascriptRunTests resultProperty="javascript.tmp.result" outputProperty="javascript.tmp.output" />
            </then>
            <else>
              <fail>The port ${javascript.server.httpport} and ${javascript.server.controlport} are used by a different test-environment or generally blocked.</fail>
            </else>
          </if>
        </then>
        <!-- check if a port is blocked -->
        <elseif>
          <or>
            <socket server="localhost" port="${javascript.server.httpport}"/>
            <socket server="localhost" port="${javascript.server.controlport}"/>
          </or>
          <then>
            <fail>The port ${javascript.server.httpport} or ${javascript.server.controlport} is blocked, the test-environment cannot be started.</fail>
          </then>
        </elseif>
        <!-- the server will be started for the tests only -->
        <else>
          <javascriptStartServer>
            <task>
              <javascriptRunTests resultProperty="javascript.tmp.result" outputProperty="javascript.tmp.output" />
              <javascriptStopServer controlPort="@{controlPort}" />
            </task>
          </javascriptStartServer>
        </else>
      </if>

      <!-- evaluate the tests -->
      <if>
        <and>
          <isset property="javascript.tmp.result" />
          <equals arg1="${javascript.tmp.result}" arg2="1" />
        </and>
        <then>
          <fail>${javascript.tmp.output}</fail>
        </then>
        <else>
          <echo>${javascript.tmp.output}</echo>
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="javascriptRunTests">
    <attribute name="resultProperty" default="javascript.tmp.result" />
    <attribute name="outputProperty" default="javascript.tmp.output" />
    
    <sequential>
      <var name="@{resultProperty}" unset="true" />
      <var name="@{outputProperty}" unset="true" />
    
      <exec executable="${javascript.testbrowser.executable}" failonerror="false" outputproperty="@{outputProperty}" resultproperty="@{resultProperty}">
        <arg value="${javascript.testbrowser.arguments}" />
        <arg value="http://localhost:${javascript.server.httpport}/${javascript.server.runtest}" />
      </exec>
    </sequential>
  </macrodef>
  
  <macrodef name="javascriptBuild">
    <sequential>
      <javascriptOptimizer />
      
      <!-- get the name of the build -->     
      <buildGetArtifactName property="build.buildFile" type="build" />
      
      <!-- create the file -->
      <fileCleanUp file="${build.buildFile}" recreate="false" />
      <buildPack src="${javascript.tmp.optimizerResultDir}" dest="${build.buildFile}" />
    </sequential>
  </macrodef>
  
  <macrodef name="javascriptAssemble">
    <attribute name="mainClass" default="${build.launcher.mainClass}" />
    
    <sequential>
      <!-- make sure we have a build -->
      <if>
        <not><equals arg1="${build.assembly.create}" arg2="true" /></not>
        <then>
          <fail>You must set the build.assembly.create attribute to true so that the project can be assembled</fail>
        </then>
        <elseif>
          <equals arg1="@{mainClass}" arg2="" />
          <then>
            <fail>No main-class (build.launcher.mainClass) specified for application assembly</fail>
          </then>
        </elseif>
      </if>
    
      <javascriptOptimizer mainClass="@{mainClass}" />
      
      <!-- get the name of the build -->
      <buildGetArtifactName property="build.appFile" type="app" />
      
      <!-- create the file -->
      <fileCleanUp file="${build.appFile}" recreate="false" />
      <zip basedir="${javascript.tmp.optimizerResultDir}" destfile="${build.appFile}" />
    </sequential>
  </macrodef>
  
  <macrodef name="javascriptCreateDevEnv">
    <sequential>
    
      <!-- update dependencies -->
      <javascriptCreateDependenciesDir />
      <javascriptCopyIndexHtml />
      
      <!-- update the tests -->
      <javascriptCreateTestToolDir />
      <javascriptCreateTestDir />
      
      <!-- update the server dependencies -->
      <javascriptResolveServerDependencies />
    </sequential>
  </macrodef>
  
  <!--
    This target starts the development-environment, i.e. a server which can be accessed via http://localhost:10000. 
    The tests can be accessed using http://localhost:10000/runTests.
    
    @author Philipp Meisen
    @since 1.0.0
  -->
  <target name="startDevEnv" depends="createDevEnv">
    <javascriptStartServer>
      <task>
        <!-- nothing to do let the server run -->
      </task>
    </javascriptStartServer>
  </target>
  
  <!--
    This target stops the development-environment.
    
    @author Philipp Meisen
    @since 1.0.2
  -->
  <target name="shutdownDevEnv" depends="stopDevEnv" />
  
  <!--
    This target stops the development-environment.
    
    @author Philipp Meisen
    @since 1.0.2
  -->
  <target name="stopDevEnv">
    <javascriptStopServer />
  </target>
  
  <target name="createDevEnv">
    <javascriptCreateDevEnv />
  </target>
  
  <target name="test" depends="createDevEnv">
    <javascriptTest />
  </target>
  
  <target name="build">
    <javascriptBuild />
  </target>
  
  <target name="javadoc">
    <buildJavaDoc addExcludes="**/*" />
  </target>
  
  <target name="sources">
    <buildPackSource />
  </target>
  
  <target name="assemble">
    <javascriptAssemble />    
  </target>
</project>