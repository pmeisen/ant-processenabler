<!--
  Library which adds some macros to work with android SDK
  
  Created on: 18.09.2013
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    18.09.2013
      - Creation of library
  -->
<project name="library_android">
  <property name="android.library.version" value="1.0.0" description="The current version of the library" />
  <dirname property="library_android.basedir" file="${ant.file.library_android}"/>

  <property name="android.library.resfile.template.project" value="${library_android.basedir}/library_android_eclipse_project.template" description="The name of the project template" />
  <property name="android.library.resfile.template.classpath" value="${library_android.basedir}/library_android_eclipse_classpath.template" description="The name of the classpath template" />
  
  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  
  <property name="android.init" value="false" description="For internal usage only, please do not modify this property by a file" />
  
  <property name="android.sdk.dir" value="" description="The sdk root directory, if empty it will be determined by the environment" />
  <property name="android.sdk.executable" value="android" description="The sdk executable" />
  
  <property name="android.dir.bin" value="bin" description="Folder to keep the binary files, generated by the compiler or eclipse" />
  <property name="android.dir.assets" value="assets" description="Folder to keep the assets, i.e. resources" />
  <property name="android.dir.res" value="res" description="Folder to keep the resources" />
  <property name="android.dir.libs" value="libs" description="Folder to keep the dependent libraries" />
  <property name="android.loc.eclipseclasses" value="${android.dir.bin}/classes" description="Location of the eclipse compiled classes" />
  <property name="android.file.projectfile" value="AndroidManifest.xml" description="Name of the file which indicates a android project" />
  <property name="android.file.projectproperties" value="project.properties" description="Property file for the android project" />
  <property name="android.force" value="false" description="Property to define if the project should always be completely updated, i.e. newly created" />
  
  <property name="android.default.target" value="" description="The default target to be used" />
  
  <!-- override some properties -->
  <property name="build.project.resources.dir" value="${android.dir.res}" description="Change the name of the resource folder" />
  <property name="build.binary.dir" value="${android.dir.bin}" description="Change the name of the binary folder" />
  <property name="eclipse.libdir" value="${android.dir.libs}" description="Change the folder to keep the dependent libraries" />
  
  <macrodef name="androidSetSdk">
    <sequential>
      <setLogLevel logLevel="error" />
      <taskdef resource="anttasks.properties" classpathref="android.antlibs" />
      <resetLogLevel />
    </sequential>
  </macrodef>
  
  <macrodef name="androidSetContrib">
    <sequential>
      <setLogLevel logLevel="error" />
      <taskdef resource="net/sf/antcontrib/antlib.xml" />
      <resetLogLevel />
    </sequential>
  </macrodef>
   
  <macrodef name="androidExec">
    <attribute name="command" />
    <attribute name="arguments" default="" />
    <attribute name="failonerror" default="true" />
    
    <sequential>
      
      <!-- reset any error -->
      <var name="tmp.androidExec.error" unset="true" />
    
      <!-- execute -->
      <if>
        <os family="windows" />
        <then>
          <exec dir="." executable="cmd" failonerror="@{failonerror}" errorproperty="tmp.androidExec.error">
            <arg line="/c &quot;${android.sdk.executable}&quot; @{command} @{arguments}"/>
          </exec>
        </then>
        <else>
          <exec dir="." executable="/bin/sh" failonerror="@{failonerror}" errorproperty="tmp.androidExec.error">
            <arg value="-c" />
            <arg value="${android.sdk.executable} @{command} @{arguments}"/>
          </exec>
        </else>
      </if>
      
      <!-- check for errors -->
      <if>
        <and>
          <isset property="tmp.androidExec.error" />
          <not><equals arg1="${tmp.androidExec.error}" arg2="" /></not>
        </and>
        <then>
          <fail>${tmp.androidExec.error}</fail>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="androidUpdateProject">
    <sequential>   
      <androidExec command="update project" arguments="-p ." />
    </sequential>
  </macrodef>
  
  <macrodef name="androidCreateProject">
    <sequential>
      
      <!-- get some meta data of the project -->
      <mavenSetPom pomid="android.tmp.pom" />
   
      <!-- modify the name to be valid -->
      <androidGetProjectName property="android.tmp.project.name" />
      
      <!-- create a folder to create the project at -->
      <var name="android.tmp.loc.create" value="${main.tmpdir}/androidCreate" />
      <fileCleanUp dir="${android.tmp.loc.create}" recreate="true" />

      <!-- get the target -->      
      <androidGetTarget property="android.tmp.project.target" />
         
      <!-- create the files -->
      <if>
        <equals arg1="${build.launcher.mainClass}" arg2="" />
        <then>       
          <var name="android.tmp.project.activity" value="BUILD_LAUNCHER_MAINCLASS" />
          <var name="android.tmp_tmp.project.package" value="${android.tmp.pom.groupId}.${android.tmp.project.name}" />
          
          <var name="android.tmp.project.package" unset="true" />
          <propertyregex property="android.tmp.project.package" input="${android.tmp_tmp.project.package}" regexp="[^a-zA-Z_0-9\.]" replace="" global="true" defaultValue="${android.tmp_tmp.project.package}" />
        </then>
        <else>
          <getPackageAndClass qualifiedName="${build.launcher.mainClass}" packageProperty="android.tmp.project.package" classProperty="android.tmp.project.activity" />
        </else>
      </if>
      
      <!-- create the project -->
      <androidExec command="create project" arguments="--target ${android.tmp.project.target} --name ${android.tmp.project.name} --path ${android.tmp.loc.create} --activity ${android.tmp.project.activity} --package ${android.tmp.project.package}" />
      
      <!-- copy the needed files -->
      <copy todir="${basedir}">
        <fileset dir="${android.tmp.loc.create}">
          <exclude name="build.xml"/>
        </fileset>
      </copy>
      
      <!-- remove the temporary files -->
      <fileCleanUp dir="${android.tmp.loc.create}" recreate="false" /> 
    </sequential>
  </macrodef>
  
  <macrodef name="androidGetProjectName">
    <attribute name="property" />
  
    <sequential>
      
      <!-- get some meta data of the project -->
      <mavenSetPom pomid="android.tmp.pom" />
      
      <!-- check if we have a name, otherwise we use the artifactId -->
      <if>
        <and>
          <isset property="android.tmp.pom.name" />
          <not><equals arg1="${android.tmp.pom.name}" arg2="" /></not>
          <not><matches string="${android.tmp.pom.name}" pattern="^Unnamed -"/></not>
        </and>
        <then>
          <var name="android.tmp_tmp.projectName" value="${android.tmp.pom.name}" />
        </then>
        <else>
          <var name="android.tmp_tmp.projectName" value="${android.tmp.pom.artifactId}" />
        </else>
      </if>
      
      <!-- modify the name to be valid -->
      <propertyregex property="@{property}" input="${android.tmp_tmp.projectName}" regexp="[^a-zA-Z_0-9]" replace="" global="true" defaultValue="${android.tmp_tmp.projectName}" />
    </sequential>
  </macrodef>
  
  <macrodef name="androidGetTarget">
    <attribute name="property" />
  
    <sequential>
      <if>
        <and>
          <isset property="android.target" />
          <not><equals arg1="" arg2="${android.target}" /></not>
        </and>
        <then>
          <var name="android.tmp.property.target" value="android.target" />
        </then>
        <elseif>
          <available file="${android.file.projectproperties}" />
          <then>
          
            <!-- reset loaded properties -->
            <var name="android.tmp.prefix.projectProperties" value="android.tmp.property.project" />
            <propertyset id="android.tmp.projectProperties">
              <propertyref regex="^\Q${android.tmp.prefix.projectProperties}\E\.(.+)$" />
            </propertyset>
            <unsetProperties propertySetId="android.tmp.projectProperties" />
            
            <!-- load the properties -->
            <loadproperties srcFile="${android.file.projectproperties}" prefix="${android.tmp.prefix.projectProperties}" />
            
            <!-- check if the property is available -->
            <if>
              <isset property="${android.tmp.prefix.projectProperties}.target" />
              <then>
                <var name="android.tmp.property.target" value="${android.tmp.prefix.projectProperties}.target" />
              </then>
            </if>
          </then>
        </elseif>
      </if>
      
      <if>
        <and>
          <isset property="android.tmp.property.target" />
          <not><equals arg1="" arg2="${android.tmp.property.target}" /></not>
        </and>
        <then>
          <!-- do nothin we got it -->
        </then>
        <elseif>
          <and>
            <isset property="android.default.target" />
            <not><equals arg1="" arg2="${android.default.target}" /></not>
          </and>
          <then>
            <var name="android.tmp.property.target" value="android.default.target" />
          </then>
        </elseif>
        <else>
          <fail>Unable to determine the android.target to be used, please set property android.default.target or specify the target using a ${android.file.projectproperties}.</fail>
        </else>
      </if>
      
      <!-- keep the result -->
      <propertycopy name="@{property}" from="${android.tmp.property.target}" />
      <propertycopy name="android.target" from="@{property}" />      
    </sequential>
  </macrodef>
      
  <macrodef name="androidRefreshProject">
    <sequential>
      <if>
        <and>
          <available file="${android.file.projectfile}" />
          <isset property="android.force" />
          <or>
            <equals arg1="${android.force}" arg2="n" />
            <equals arg1="${android.force}" arg2="no" />
            <equals arg1="${android.force}" arg2="false" />
          </or>
        </and>
        <then>
          <androidUpdateProject />
        </then>
        <else>
          <androidCreateProject />
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="androidCreateAdditionalProjectFolders">  
    <sequential>
      <mkdir dir="${android.dir.assets}" />
    </sequential>
  </macrodef>
    
  <macrodef name="androidSetAndroidLibrary">  
    <attribute name="isLibrary" />
    
    <sequential>
      <!-- reset loaded properties -->
      <var name="android.tmp.prefix.projectProperties" value="android.tmp.property.project" />
      <propertyset id="android.tmp.projectProperties">
        <propertyref regex="^\Q${android.tmp.prefix.projectProperties}\E\.(.+)$" />
      </propertyset>
      <unsetProperties propertySetId="android.tmp.projectProperties" />
      
      <!-- backup the project-properties-file and load the properties -->
      <if>
        <available file="${android.file.projectproperties}" />
        <then>
          <generateUUID property="android.tmp.backup.file" />
          <var name="android.tmp.backup.location" value="${main.tmpdir}/${android.tmp.backup.file}" />
          <copy file="${android.file.projectproperties}"  tofile="${android.tmp.backup.location}" overwrite="true" />
          
          <!-- load the properties -->
          <loadproperties srcFile="${android.file.projectproperties}" prefix="${android.tmp.prefix.projectProperties}" />
        </then>
        <else>
          <var name="android.tmp.backup.location" unset="true" />
        </else>
      </if>
      
      <!-- define the property android.library -->
      <var name="${android.tmp.prefix.projectProperties}.android.library" value="@{isLibrary}" />

      <!-- select all the properties of the file and the additional one -->
      <propertyset id="android.tmp.projectProperties">
        <propertyref regex="^\Q${android.tmp.prefix.projectProperties}\E\.(.+)$" />
      </propertyset>
      
      <!-- remove the prefix of the properties -->
      <modifyProperties prefix="${android.tmp.prefix.projectProperties}" propertySetId="android.tmp.projectProperties" resultPropertySetId="android.tmp.modifiedProjectProperties" />
      
      <!-- create the file and load the properties -->
      <echoproperties destfile="${android.file.projectproperties}">
        <propertyset refid="android.tmp.modifiedProjectProperties" />
      </echoproperties>
      <loadproperties srcFile="${android.file.projectproperties}" />
      
      <!-- remove the file -->
      <delete file="${android.file.projectproperties}" />
      
      <!-- reset the file -->
      <if>
        <isset property="android.tmp.backup.location" />
        <then>
          <copy file="${android.tmp.backup.location}"  tofile="${android.file.projectproperties}" overwrite="true" />
          <loadproperties srcFile="${android.file.projectproperties}" />
        </then>
      </if>
    </sequential>
  </macrodef>
    
  <!--
    initialize - do some things that has to be done
    -->
  <if>
    <equals arg1="${android.init}" arg2="false" />
    <then>
            
      <!-- load some properties of the adk -->
      <property file="local.properties" />
      <property file="ant.properties" />
      
      <!-- 
        if sdk.dir was not set from one of the property file, then get it from the ANDROID_HOME env var.
        This must be done before we load project.properties since the proguard config can use sdk.dir 
        -->
      <property environment="env" />
      <if>
        <and><isset property="sdk.dir" /><not><equals arg1="${sdk.dir}" arg2="" /></not></and>
        <then>
          <!-- nothing to do -->
        </then>
        <elseif>
          <and><isset property="android.sdk.dir" /><not><equals arg1="${android.sdk.dir}" arg2="" /></not></and>
          <then>  
            <var name="sdk.dir" value="${android.sdk.dir}" />
          </then>
        </elseif>
        <elseif>
          <and><isset property="env.ANDROID_HOME" /><not><equals arg1="${env.ANDROID_HOME}" arg2="" /></not></and>
          <then>  
            <var name="sdk.dir" value="${env.ANDROID_HOME}" />
          </then>
        </elseif>
      </if>
      
      <!-- validate settings of sdk.dir -->
      <if>
        <not><isset property="sdk.dir" /></not>
        <then>
          <fail>sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable.</fail>
        </then>
        <elseif>
          <not><available file="${sdk.dir}/tools/ant/build.xml" /></not>
          <then>
            <fail>Cannot find the build of the SDK at '${sdk.dir}/tools/ant/build.xml'.</fail>
          </then>
        </elseif>
        <else>
          <echo level="info">Using sdk.dir: ${sdk.dir}</echo>
        </else>
      </if>
      
      <!-- load project properties of the adk -->
      <if>
        <available file="${android.file.projectproperties}" />
        <then>
          <loadproperties srcFile="${android.file.projectproperties}" />
        </then>
      </if>
            
      <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
        -->
      <import file="custom_rules.xml" optional="true" />
      
      <!-- import the targets etc. of the SDK -->
      <import file="${sdk.dir}/tools/ant/build.xml" as="androidSDK" />
      
      <!-- 
        Activate the contrib tasks (i.e. if) again. The SDK overrides
        the definition of the if-task, therefore it is necessary to reactivate
        contrib again. Each target call of the SDK must be wrapped:
        
        -androidSetSDK androidSDK.target -androidSetContrib
        -->
      <androidSetContrib />
      
      <!-- 
        Check if we have a AndroidManifest.xml and no local.properties, if so the 
        project was probably checked out and the file has to be created.
        -->
      <if>
        <and>
          <available file="${android.file.projectfile}" />
          <not><available file="local.properties" /></not>
        </and>
        <then>
          <androidRefreshProject />
        </then>
      </if>
    </then>
  </if>
  
  <target name="-androidSetSDK">
    <androidSetSdk />
  </target>
  
  <target name="-androidSetContrib">
    <androidSetContrib />
  </target>
  
  <target name="-androidAdditionalHelp">
    <!-- displays starts at col 13
              |13                                                              80| -->
    <echo>Some android SDK targets are wrapped, to ensure functionality with</echo>
    <echo>the ant-processenabler. Therefore all targets should be called via the</echo>
    <echo>name mentioned in the following list. To call the none-wrapped target,</echo>
    <echo>i.e. the one of the SDK directly, just add the prefix 'androidSDK.'</echo>
    <echo>e.g.:</echo>
    <echo>   androidSDK.clean</echo>
    <echo>   androidSDK.debug</echo>
    <echo>   androidSDK.help</echo>
  </target>
  
  <target name="-androidRemoveCrunch">
    <delete dir="${android.dir.bin}/res/crunch" includeemptydirs="true" />
  </target>
  
  <target name="help" depends="-androidAdditionalHelp,-androidSetSDK,androidSDK.help,-androidSetContrib" />
  
  <target name="clean" depends="-androidSetSDK,androidSDK.clean,-androidSetContrib" />
  
  <target name="run" depends="-androidRemoveCrunch,-androidSetSDK,androidSDK.debug,androidSDK.install,-androidSetContrib" />
  
  <target name="removePreBuilds" depends="clean">
    <buildRemovePreBuilds />
  </target>
  
  <target name="-androidSetLibraryProjectType">
    <androidSetAndroidLibrary isLibrary="true" />
  </target>
  
  <target name="-androidSetAppProjectType">
    <androidSetAndroidLibrary isLibrary="false" />
  </target>
  
  <target name="-androidCheckAssemblyPreConditions">
  
    <!-- make sure we have a main -->
    <if>
      <not><equals arg1="${build.assembly.create}" arg2="true" /></not>
      <then>
        <fail>You must set the build.assembly.create attribute to true so that the project can be assembled</fail>
      </then>
      <elseif>
        <equals arg1="@{mainClass}" arg2="" />
        <then>
          <fail>No main-class (build.launcher.create property) specified for application assembly</fail>
        </then>
      </elseif>
    </if>
  </target>
   
  <target name="build" depends="-androidRemoveCrunch,-androidSetLibraryProjectType,-androidSetSDK,androidSDK.debug,-androidSetContrib">
    
    <!-- make sure the file was build -->
    <if>
      <not><available file="${out.library.jar.file}" /></not>
      <then>
        <fail>The file '${out.library.jar.file}' should have been build, but cannot be found.</fail>
      </then>
    </if>
    
    <!-- get the pom settings -->
    <mavenSetPom />
    <var name="build.buildFile" value="${build.dir}/${maven.pom.artifactId}-${maven.pom.version}.jar" />
    
    <!-- copy the built file -->
    <delete file="${build.buildFile}" />
    <copy file="${out.library.jar.file}" tofile="${build.buildFile}" />
  </target>
  
  <target name="assemble" depends="-androidCheckAssemblyPreConditions,-androidRemoveCrunch,-androidSetAppProjectType,-androidSetSDK,androidSDK.debug,-androidSetContrib">
    <var name="build.appFile" value="${out.final.file}" />
    
    <!-- make sure the file was assembled -->
    <if>
      <not><available file="${build.appFile}" /></not>
      <then>
        <fail>The file '${build.appFile}' should have been assembled, but cannot be found.</fail>
      </then>
    </if>
  </target>
    
  <target name="javadoc">
    <!-- get some information about the target -->
    <setLogLevel logLevel="error" />
    <var name="android.tmp.android.jar" unset="true" />
    <gettarget androidJarFileOut="android.tmp.android.jar" androidAidlFileOut="android.tmp.framework.aidl"
               bootClassPathOut="android.tmp.class.path" targetApiOut="android.tmp.apilevel" minSdkVersionOut="android.tmp.minSdkVersion" />
    <resetLogLevel />
    
    <!-- create a fileset with only the the android jar -->
    <var name="android.tmp.android.jar.dir" unset="true" />
    <var name="android.tmp.android.jar.file" unset="true" />
    <dirname property="android.tmp.android.jar.dir" file="${android.tmp.android.jar}" />
    <basename property="android.tmp.android.jar.file" file="${android.tmp.android.jar}" />
    <fileset dir="${android.tmp.android.jar.dir}" id="android.tmp.android.jar.fileset">
      <include name="${android.tmp.android.jar.file}"/>
    </fileset>

    <!-- build the javadoc -->
    <buildJavaDoc addClassPathFileSet="android.tmp.android.jar.fileset" />
    <buildPackJavaDoc />
  </target>
  
  <target name="install" depends="build.install" />
  
  <target name="deploy" depends="build.deploy" />
  
  <target name="createDevEnv">
    <eclipseCreateDirectories />
    <eclipseCreateProject template="${android.library.resfile.template.project}" />
    <eclipseCreateClassPath template="${android.library.resfile.template.classpath}" />
    
    <eclipseCreateSettings />
    <eclipseCreateLauncher />
    
    <!-- execute android -->
    <androidRefreshProject />
    <androidCreateAdditionalProjectFolders />
  </target>
</project>