<!--
  Library which adds some macros and targets for configuration operations
  
  Created on: 06.12.2012
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    06.12.2012
      - Creation of library
    28.01.2013
      - added addional configuration possibilities (e.g. files.xml, resources-folder, ...)
  -->
<project name="library_configuration">
  <property name="configuration.library.version" value="1.0.0" description="The current version of the library" />
  <dirname property="library_configuration.basedir" file="${ant.file.library_configuration}"/>

  <property name="configuration.library.resfile.pomConfiguration.merge" location="${main.root}/maven/pomConfiguration_xmlMerge.properties" />
  
  <property name="configuration.properties.location" value="" description="The location to load the settings from, should be defined in the scriptconfig.properties, must be relative to the library_main" />
  <property name="configuration.versions.foldername" value="" description="The name of the folder in which the versions are found, must be a sub-directory wherever the build.xml is found" />
  <property name="configuration.settings.defaultconfig" value="_default" description="The folder in which the default configuration can be found" />
  <property name="configuration.settings.defaultcustomer" value="default" description="The folder in which the default customer can be found" />
  <property name="configuration.config.filename" value="config.properties" description="The name of the configuration file to be read" />
  <property name="configuration.config.user.filename" value="alternative.properties" description="The name of the configuration file to be read for the user (overrides the other settings)" />
  <property name="configuration.resources.foldername" value="resources" description="The folder in which resources added for the customer are located" />
  
  <property name="configuration.resource.dependency" value="configuration.dependency" description="The resource type of a dependency" />
  <property name="configuration.replacement.default.pattern" value="${file.replacement.default.pattern}" description="The pattern to check which files should be property-replaced" />
  <property name="configuration.replacement.additional.pattern" value="" description="Additional list of pattern, i.e. \.script|\.test to check for files of property replacement" />
  
  <property name="configuration.resourcetype.dependency" value="configuration.dependency" />
  <property name="configuration.resourcetype.resource" value="configuration.resource" />
  
  <property name="configuration.init" value="false" description="For internal usage only, please do not modify this property by a file" />  
  
  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <!--
    initialize - do some things that have to be done
    -->
  <if>
    <equals arg1="${configuration.init}" arg2="false" />
    <then>

      <!-- we need a customer -->
      <if>
        <not><isset property="customer" /></not>
        <then>
          <property name="customer" value="${configuration.settings.defaultcustomer}" />
        </then>
      </if>
      
      <!-- check if alternative is set -->
      <if>
        <not><isset property="alternative" /></not>
        <then>
          <var name="alternative" value="false" />
        </then>
      </if> 
      
      <!-- set some properties -->
      <property name="configuration.main.root" value="${basedir}" />
      <property name="configuration.settings.root" location="${configuration.properties.location}" />
      <property name="configuration.settings.pomfolder" location="${configuration.main.root}/${configuration.versions.foldername}" />
      <property name="configuration.settings.default" location="${configuration.settings.root}/${configuration.settings.defaultconfig}" />

      <!-- initialization finshed -->
      <var name="configuration.init" value="true" />
    </then>
  </if>
  
  <macrodef name="configurationLoadProperties">
    <attribute name="customer" default="${customer}" />
    <attribute name="alternative" default="${alternative}" />
    
    <sequential>
      <var name="configuration.customer" value="@{customer}" />
      <var name="configuration.settings.customer" value="${configuration.settings.root}/@{customer}" />

      <!-- reload the properties first the default, then the customer - it's var not property -->
      <var file="${configuration.settings.default}/${configuration.config.filename}" />
      <var file="${configuration.settings.customer}/${configuration.config.filename}" />
      
      <!-- load the customer properties, check if the alternative should be loaded -->
      <if>
        <or>
          <equals arg1="@{alternative}" arg2="y" />
          <equals arg1="@{alternative}" arg2="yes" />
          <equals arg1="@{alternative}" arg2="true" />
        </or>
        <then>
          <var name="configuration.alternative" value="true" />
          <var file="${configuration.settings.customer}/${configuration.config.user.filename}" />
        </then>
        <else>
          <var name="configuration.alternative" value="false" />
        </else>
      </if>
      
      <!-- now replace all properties within properties one last time -->
      <propertyset id="configuration.tmp.propertiesSet" />
      <replacePropertiesInProperties propertySetId="configuration.tmp.propertiesSet" />
      
      <!-- now add a hook -->
      <configurationPostProperties />
      
    </sequential>
  </macrodef>
  
  <macrodef name="configurationLoadVersionProperties">
    <attribute name="version" default="${version}" />
    <attribute name="customer" default="${customer}" />
    
    <sequential>
    
      <!-- load the file attributes -->
      <if>
        <available file="${configuration.settings.customer}/${configuration.version.property}/files.xml" />
        <then>
          <var name="configuration.tmp.files.location" value="${java.io.tmpdir}/files.xml" />
          <fileReplaceAllProperties file="${configuration.settings.customer}/${configuration.version.property}/files.xml" destFile="${configuration.tmp.files.location}" />
          <xmlproperty file="${configuration.tmp.files.location}" />
          <delete file="${configuration.tmp.files.location}" />
        </then>
      </if>
      
      <!-- get the version -->
      <if>
        <not><matches pattern="\$\{.+\}" string="@{version}" /></not>
        <then>
          <var name="configuration.version" value="@{version}" />   
        </then>
        <elseif>
          <not><isset property="configuration.version.property" /></not>
          <then>
            <var name="configuration.version" value="" unset="true" />
          </then>
        </elseif>
        <else>
          <var name="configuration.version" value="" unset="true" />
          <propertycopy name="configuration.version" from="${configuration.version.property}" />   
        </else>
      </if>
      
      <!-- get the pom file to be loaded, create it if additional customer specific dependencies are defined -->
      <var name="configuration.settings.pom" value="${configuration.settings.pomfolder}/pom-${configuration.version}.xml" />
      <var name="configuration.settings.additionalpom" value="${configuration.settings.customer}/${configuration.version.property}/pom.xml" />
      <if>
        <available file="${configuration.settings.additionalpom}" />
        <then>
          <var name="configuration.settings.finalpom" value="${maven.tmpdir}/merged_pom.xml" />
          <fileMergeXml file1="${configuration.settings.pom}" 
                        file2="${configuration.settings.additionalpom}" 
                        dest="${configuration.settings.finalpom}" 
                        conf="${configuration.library.resfile.pomConfiguration.merge}" />
        </then>
        <else>
          <var name="configuration.settings.finalpom" value="${configuration.settings.pom}" />
        </else>
      </if>
      
      <!-- load the dependency of the version -->
      <if>
        <and>
          <available file="${configuration.settings.pom}" />
          <available file="${configuration.settings.finalpom}" />
        </and>
        <then>
          <mavenResolveDependencies fileset="configuration.dependencies.componentlibs" pomid="configuration.dependencies.componentpom" pomfile="${configuration.settings.pom}" />
          <mavenResolveDependencies fileset="configuration.dependencies.libs" pomid="configuration.dependencies.pom" pomfile="${configuration.settings.finalpom}" />
        </then>
      </if>
      
      <configurationPostVersionProperties />
    </sequential>
  </macrodef>
  
  <!--
    configurationSetup - setups a configuration
    -->
  <macrodef name="configurationSetup">
    <attribute name="version" default="${version}" />
    <attribute name="location" default="${user.name}" />
    <attribute name="customer" default="${customer}" />
    <attribute name="alternative" default="${alternative}" />
  
    <sequential>
      <!-- this call sets the configuration.customer, configuration.settings.customer, configuration.alternative and further properties -->
      <configurationLoadProperties customer="@{customer}" alternative="@{alternative}" />
      <!-- this call sets the configuration.version and further properties -->
      <configurationLoadVersionProperties customer="${configuration.settings.customer}" version="@{version}" />
        
      <!-- check if the files exists -->
      <if>
        <or>
          <not><available file="${configuration.settings.default}"/></not>
          <not><available file="${configuration.settings.customer}"/></not>
          <not><available file="${configuration.settings.finalpom}"/></not>
        </or>
        <then>
          <fail>At least one needed folder/file cannot be found, please check the list of '${configuration.settings.default}', '${configuration.settings.customer}', and '${configuration.settings.finalpom}'</fail>
        </then>
      </if>

      <!-- create the pattern -->
      <var name="configuration.tmp.replacement.pattern" value="${configuration.replacement.default.pattern}" />
      <if>
        <and>
          <isset property="configuration.replacement.additional.pattern" />
          <not><equals arg1="${configuration.replacement.additional.pattern}" arg2="" /></not>
        </and>
        <then>
          <var name="configuration.tmp.replacement.pattern" value="${configuration.replacement.default.pattern}|${configuration.replacement.additional.pattern}" />
        </then>
      </if>
      
      <!-- make sure we have one dependency -->
      <var name="configuration.tmp.location" value="@{location}/tmp" />
      <if>
        <resourcecount refid="configuration.dependencies.libs" when="equal" count="0" />
        <then>
          <fail>The '${configuration.settings.pom}' does not define a valid dependency please validate</fail>
        </then>
        <else>
          
          <!-- we have several dependencies which have to be setup -->
          <fileCleanUp dir="${configuration.tmp.location}" recreate="true" />
          <fileCallMacroForEach macro="configurationBuildPackage" parameters="resourceType=[[${configuration.resourcetype.dependency}]];rootFolder=[[${configuration.tmp.location}]];filePattern=[[${configuration.tmp.replacement.pattern}]];">
            <fileset refid="configuration.dependencies.libs" />
          </fileCallMacroForEach>
        </else>
      </if>
      
      <configurationPostDependencies />
            
      <!-- get additional files -->
      <propertyset id="configuration.tmp.files">
        <propertyref regex="^files\.file\d+\(from\)$" />
      </propertyset>

      <script language="javascript"><![CDATA[
        var location = project.getProperty("configuration.tmp.location");
        var resourceCollectionId = "configuration.tmp.files";
        var refs = project.hasReference(resourceCollectionId) ? project.getReference(resourceCollectionId) : null;

        // check the collection
        var finalList = "";
        if (refs != null && refs.size() > 0) {
          var entries = refs.iterator();

          while (entries.hasNext()) {
            var entry = entries.next();
            var entryRegExp = "files\\.file(\\d+)\\(from\\)";
            var entryPattern = java.util.regex.Pattern.compile(entryRegExp);
            var entryMatcher = entryPattern.matcher(entry.getName());
            entryMatcher.find();
            var fileNumber = entryMatcher.group(1);
            
            // get the other properties for the file
            var from = project.getProperty("files.file" + fileNumber + "(from)");
            var to = project.getProperty("files.file" + fileNumber + "(to)");
            var unzip = project.getProperty("files.file" + fileNumber + "(unzip)");
            var includes = project.getProperty("files.file" + fileNumber + "(includes)");
            var excludes = project.getProperty("files.file" + fileNumber + "(excludes)");

            // execute whatever has to be done
            var configurationCopyFiles = project.createTask("configurationCopyFiles"); 
            configurationCopyFiles.setDynamicAttribute("from", from);
            configurationCopyFiles.setDynamicAttribute("to", location + "/" + to);
            configurationCopyFiles.setDynamicAttribute("unzip", unzip);
            configurationCopyFiles.setDynamicAttribute("includes", includes);
            configurationCopyFiles.setDynamicAttribute("excludes", excludes);
            configurationCopyFiles.execute();
          }
        }
      ]]></script>
      
      <configurationPostFiles />
      
      <!-- get the additional stuff -->
      <var name="configuration.resources.tmp.location" value="${configuration.settings.customer}/${configuration.version.property}/${configuration.resources.foldername}" />
      <if>
        <available file="${configuration.resources.tmp.location}" />
        <then>
          <fileCallMacroForEach macro="configurationBuildPackage" parameters="resourceType=[[${configuration.resourcetype.resource}]];rootFolder=[[${configuration.tmp.location}]];filePattern=[[${configuration.tmp.replacement.pattern}]];">
            <fileset dir="${configuration.resources.tmp.location}" />
          </fileCallMacroForEach>
        </then>
      </if>
      
      <configurationPostResources />
      
      <!-- now pack the whole thing and wrap it up -->
      <if>
        <or>
          <equals arg1="@{alternative}" arg2="y" />
          <equals arg1="@{alternative}" arg2="yes" />
          <equals arg1="@{alternative}" arg2="true" />
        </or>
        <then>
          <var name="configuration.tmp.zipFileName" value="${configuration.dependencies.pom.artifactId}-${configuration.version}-${configuration.customer}-alternative.zip" />
        </then>
        <else>
          <var name="configuration.tmp.zipFileName" value="${configuration.dependencies.pom.artifactId}-${configuration.version}-${configuration.customer}.zip" />
        </else>
      </if>
      <delete file="@{location}/${configuration.tmp.zipFileName}" />
      <zip destfile="@{location}/${configuration.tmp.zipFileName}" basedir="${configuration.tmp.location}" />
      
      <!-- cleanUp -->
      <delete dir="${configuration.tmp.location}" />
    </sequential>
  </macrodef>

  <macrodef name="configurationPostProperties">
    <sequential />
  </macrodef>
  
  <macrodef name="configurationPostVersionProperties">
    <sequential />
  </macrodef>
  
  <macrodef name="configurationPostDependencies">
    <sequential />
  </macrodef>

  <macrodef name="configurationPostFiles">
    <sequential />
  </macrodef>

  <macrodef name="configurationPostResources">
    <sequential />
  </macrodef>  
  
  <macrodef name="configurationCopyFiles">
    <attribute name="from" />
    <attribute name="to" />
    <attribute name="unzip" default="false" />
    <attribute name="includes" default="**/*" />
    <attribute name="excludes" default="" />
    
    <sequential>
      <fileInfo file="@{from}" />

      <!-- do the stuff -->
      <if>
        <equals arg1="${fileInfo.dir}" arg2="true" />
        <then>
          <copy todir="@{to}">
            <fileset dir="@{from}" includes="@{includes}" excludes="@{excludes}" />
          </copy>
        </then>
        <else>
          <if>
            <equals arg1="@{unzip}" arg2="true" />
            <then>
              <unzip src="@{from}" dest="@{to}" overwrite="true" />
            </then>
            <else>
              <copy file="@{from}" todir="@{to}" />
            </else>
          </if>
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="configurationBuildPackage">
    <attribute name="resourceFolder" />
    <attribute name="resourceFileName" />
    <attribute name="resource" />
    <attribute name="resourceType" />
    <attribute name="rootFolder" />
    <attribute name="filePattern" />
    <attribute name="basedir" />
    
    <sequential>
      <var name="confMapper.unzip" value="" />
      <var name="confMapper.location" value="" />
      <var name="confMapper.replaceProperties" value="true" />
      <var name="confMapper.useDefault" value="true" />
    
      <!-- get the new location -->
      <configurationCustomerMapper resourceType="@{resourceType}" resourceFolder="@{resourceFolder}" resource="@{resource}" resourceFileName="@{resourceFileName}" />
      <if>
        <or>
          <equals arg1="${confMapper.useDefault}" arg2="y" />
          <equals arg1="${confMapper.useDefault}" arg2="yes" />
          <equals arg1="${confMapper.useDefault}" arg2="true" />
        </or>
        <then>
          <configurationMapper resourceType="@{resourceType}" resourceFolder="@{resourceFolder}" resource="@{resource}" resourceFileName="@{resourceFileName}" />
        </then>
      </if>
      
      <!-- thats a workaround for the list, because an empty list would not trigger the for -->
      <if>
        <equals arg1="${confMapper.location}" arg2="" />
        <then>
          <var name="confMapper.location" value="   " />
        </then>
      </if>
      
      <!-- distribute the file -->
      <for list="${confMapper.location}" param="configuration.tmp.location" delimiter=":" trim="true">
        <sequential>
          <if>
            <and>
              <equals arg1="@{resourceType}" arg2="${configuration.resourcetype.dependency}" />
              <or>
                <equals arg1="${confMapper.unzip}" arg2="true" />
                <equals arg1="${confMapper.unzip}" arg2="y" />
                <equals arg1="${confMapper.unzip}" arg2="yes" />
                <and>
                  <matches pattern=".+\.zip$" string="@{resourceFileName}" />
                  <equals arg1="${confMapper.unzip}" arg2="" />
                </and>
              </or>
            </and>
            <then>
              <if>
                <equals arg1="${confMapper.replaceProperties}" arg2="true" />
                <then>
                  <fileReplaceAllPropertiesInZip file="@{resource}" dest="@{rootFolder}/@{configuration.tmp.location}" filePattern="@{filePattern}" rezip="false" />
                </then>
                <else>
                  <unzip src="@{resource}" dest="@{rootFolder}/@{configuration.tmp.location}" overwrite="true" />
                </else>
              </if>
            </then>
            <elseif>
              <equals arg1="@{resourceType}" arg2="${configuration.resourcetype.dependency}" />
              <then>
                <if>
                  <equals arg1="${confMapper.replaceProperties}" arg2="true" />
                  <then>
                    <fileReplaceAllPropertiesInZip file="@{resource}" dest="@{rootFolder}/@{configuration.tmp.location}/@{resourceFileName}" filePattern="@{filePattern}" rezip="true" />
                  </then>
                  <else>
                    <copy file="@{resource}" todir="@{rootFolder}/@{configuration.tmp.location}" overwrite="true" />
                  </else>
                </if>
              </then>
            </elseif>
            <else>
              <fileGetSubPath basedir="@{basedir}" file="@{resource}" property="configuration.tmp.subdir" />
              <if>
                <equals arg1="${confMapper.replaceProperties}" arg2="true" />
                <then>
                  <fileReplaceAllProperties file="@{resource}" destFile="@{rootFolder}/@{configuration.tmp.location}/${configuration.tmp.subdir}/@{resourceFileName}" filePattern="@{filePattern}" />
                </then>
                <else>
                  <copy file="@{resource}" todir="@{rootFolder}/@{configuration.tmp.location}/${configuration.tmp.subdir}" overwrite="true" />
                </else>
              </if>
            </else>
          </if>
        </sequential>
      </for>
    </sequential>
  </macrodef>

  <macrodef name="configurationCustomerMapper">
    <attribute name="resourceFolder" />
    <attribute name="resourceFileName" />
    <attribute name="resource" />
    <attribute name="resourceType" />
    
    <sequential>
      <!-- do nothing -->
      <!-- ${confMapper.location}          - contains the location within the rootFolder to copy the data to, default=""       -->
      <!-- ${confMapper.replaceProperties} - defines if properties should be replace, can be "true" or "false", default="true" -->
      <!-- ${confMapper.useDefault}        - defines that the default behaviour should be used, default="true"                 -->
      <!-- ${confMapper.unzip}             - defines that the file should be unzipped if set to true, 
                                             if emtpy the file will be unzipped if its a zip file, default=""                  -->
      
      <!-- the default implementation reads a property to map the location of a dependency/resource -->
      <propertyset id="configuration.tmp.patternDef">
        <propertyref regex="^configuration\.configurationCustomerMapper\..+\.pattern$" />
      </propertyset>
      
      <!-- convert it to a path -->
      <var name="configuration.tmp.resource" value="@{resource}" />
      <script language="javascript"><![CDATA[
        var patternProperty = "pattern";
        var resourceCollectionId = "configuration.tmp.patternDef";
        var resource = project.getProperty("configuration.tmp.resource");
        
        // get the collection
        var refs = project.hasReference(resourceCollectionId) ? project.getReference(resourceCollectionId) : null;

        // check the collection
        if (refs != null && refs.size() > 0) {
          var entries = refs.iterator();

          while (entries.hasNext()) {
            var entry = entries.next();           
            var entryRegExp = entry.getValue();
            var entryPattern = java.util.regex.Pattern.compile(entryRegExp);
            
            // check if the resource matches
            if (entryPattern.matcher(resource).find()) {

              // get the id of the property
              var regExp = "^configuration\\.configurationCustomerMapper\\.(.+)\\." + patternProperty + "$";
              var pattern = java.util.regex.Pattern.compile(regExp);
              var matcher = pattern.matcher(entry.getName());
              var id = matcher.find() ? matcher.group(1) : null;
              
              // get the properties
              var propertyRegEx = "^configuration\\.configurationCustomerMapper\\." + id + "\\.(.+)$";
              var definePropertyRef = new org.apache.tools.ant.types.PropertySet.PropertyRef();
              definePropertyRef.setRegex(propertyRegEx);
              var propertySet = new org.apache.tools.ant.types.PropertySet();
              propertySet.setProject(project);
              propertySet.addPropertyref(definePropertyRef);
              var properties = propertySet.getProperties();
              var propertyNames = properties.propertyNames();
                            
              while (propertyNames.hasMoreElements()) {
                var property = propertyNames.nextElement();
                var propertyValue = properties.getProperty(property);
                
                // get the property to be set               
                var propertyPattern = java.util.regex.Pattern.compile(propertyRegEx);
                var propertyMatcher = propertyPattern.matcher(property);
                var propertyName = propertyMatcher.find() ? propertyMatcher.group(1) : null;
                
                if (!patternProperty.equals(propertyName)) {                
                  var setProperty = project.createTask("var");
                  setProperty.setName("confMapper." + propertyName);
                  setProperty.setValue(propertyValue);
                  setProperty.execute();
                }                
              }
                            
              // set the location
              var setProperty = project.createTask("var");
              setProperty.setName("confMapper.useDefault");
              setProperty.setValue("false");
              setProperty.execute();
            }
          }
        }
      ]]></script>

    </sequential>
  </macrodef>
  
  <macrodef name="configurationMapper">
    <attribute name="resourceFolder" />
    <attribute name="resourceFileName" />
    <attribute name="resource" />
    <attribute name="resourceType" />
    
    <sequential>
      <!-- do nothing -->
      <!-- ${confMapper.location}          - contains the location within the rootFolder to copy the data to, default=""       -->
      <!-- ${confMapper.replaceProperties} - defines if properties should be replace, can be "true" or "false", default="true" -->
      <!-- ${confMapper.unzip}             - defines that the file should be unzipped if set to true, 
                                             if emtpy the file will be unzipped if its a zip file, default=""                  -->
    </sequential>
  </macrodef>
  
  <target name="create">
  
    <if>
      <isset property="configuration.location" />
      <then>
        <configurationSetup location="${configuration.location}" />
      </then>
      <else>
        <configurationSetup />
      </else>
    </if>
  </target>
</project>