<!--
  Library which adds some macros and targets for maven operations
  
  Created on: 01.03.2012
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    01.03.2012
      - Creation of library
  -->
<project name="library_maven" xmlns:artifact="antlib:org.apache.maven.artifact.ant" xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors">
  <property name="maven.library.version" value="1.2.5" description="The current version of the library" />
  <dirname property="library_maven.basedir" file="${ant.file.library_maven}"/>
  
  <property name="maven.library.resfile.settings.source" location="${main.root}/maven/settings_source.xml" description="The master settings.xml for all projects (sources)" />
  <property name="maven.library.resfile.settings.target" location="${main.root}/maven/settings_target.xml" description="The master settings.xml for all projects (targets)" />
  <property name="maven.library.resfile.pom.snapshot" location="${main.root}/maven/pomSnapshot.xml" />
  <property name="maven.library.resfile.pomSnapshot.merge" location="${main.root}/maven/pomSnapShot_xmlMerge.properties" />

  <property name="maven.dependencies.dir" value="_deps" description="Folder in which dependencies should be copied when using target copyDeps" />
  <property name="maven.depsdir" location="${maven.dependencies.dir}" description="Full path to the folder in which dependencies should be copied when using target copyDeps" />
  
  <property name="maven.artifactory.source.url" value="" description="URL to access the artifactory (to resolve dependencies)" />
  <property name="maven.artifactory.target.url" value="" description="URL to access the artifactory (for artifacts to be deployed)" />
  <property name="maven.repository.source.forceoffline" value="false" description="if set to true, the repository will be forced to be assumed offline" />
  <property name="maven.repository.target.forceoffline" value="false" description="if set to true, the repository will be forced to be assumed offline" />
  <property name="maven.repository.local" location="${user.home}/.m2/repository" description="The local maven repository" />
  <property name="maven.repository.source.url" value="${maven.artifactory.source.url}/OVERALL" description="The source repository to be used (used in settings.xml)" />
  <property name="maven.repository.source.repositoryId" value="central" description="The id of the source repository (used in settings.xml)" />
  <property name="maven.repository.target.releaseUrl" value="${maven.artifactory.target.url}/RELEASES" description="The repository to be used for releases" />
  <property name="maven.repository.target.snapshotUrl" value="${maven.artifactory.target.url}/SNAPSHOTS" description="The repository to be used for snapshots" />
  <property name="maven.repository.target.repositoryId" value="centralTarget" description="The id of the target repository" />
  
  <property name="maven.pom.property" value="maven.pom" description="For internal usage only, the default name for the property which contains pom information" />
  <property name="maven.init" value="false" description="For internal usage only, please do not modify this property by a file" />
  
  <property name="maven.attachment.sources" value="sources" description="attachment classifer for sources" />
  <property name="maven.attachment.javadoc" value="javadoc" description="attachment classifer for javadocs" />
  <property name="maven.attachment.webappresources" value="webappres" description="attachment classifer for gwt-compiled javascripts and other web application resources" />
  <property name="maven.attachment.fullcompiled" value="full" description="attachment classifer for fully compiled packages even if parts of the package are not meant to be compiled (e.g. client side code, which gets compiled to JavaScript)" />
  <property name="maven.attachment.distribute" value="distribute" description="attachment classifer for distributions, i.e. specially distributed sources" />
  <property name="maven.attachment.app" value="app" description="attachment classifer for application" />
  <property name="maven.attachment.modified" value="modified" description="attachment classifer for modified jars (should never be in the artifactory)" />
  <property name="maven.attachment.test" value="test" description="attachment classifer for test packages" />
  <property name="maven.attachment.testsources" value="testsources" description="attachment classifer for test sources packages" />
            
  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <!--
    initialize - do some things that have to be done
    -->
  <if>
    <equals arg1="${maven.init}" arg2="false" />
    <then>

      <!-- create the repository directory -->
      <mkdir dir="${maven.repository.local}" />
      
      <!-- generate a unique temp-directory -->
      <generateUUID property="maven.tmpfolder" />
      <property name="maven.tmpdir" location="${main.tmpdir}/${maven.tmpfolder}" description="Project source code directory" />
      <mkdir dir="${maven.tmpdir}" />
      
      <!-- check if the repository is available -->
      <if>
        <or>
          <equals arg1="${maven.repository.source.forceoffline}" arg2="y" />
          <equals arg1="${maven.repository.source.forceoffline}" arg2="yes" />
          <equals arg1="${maven.repository.source.forceoffline}" arg2="true" />
        </or>
        <then>
          <var name="maven.repository.source.offline" value="true" />
        </then>
        <else>
          <serverHttpNotReachable url="${maven.artifactory.source.url}" property="maven.repository.source.offline" />
        </else>
      </if>
      <if>
        <or>
          <equals arg1="${maven.repository.target.forceoffline}" arg2="y" />
          <equals arg1="${maven.repository.target.forceoffline}" arg2="yes" />
          <equals arg1="${maven.repository.target.forceoffline}" arg2="true" />
        </or>
        <then>
          <var name="maven.repository.target.offline" value="true" />
        </then>
        <else>
          <serverHttpNotReachable url="${maven.artifactory.target.url}" property="maven.repository.target.offline" />
        </else>
      </if>
      
      <!-- get the right pom.xml -->
      <if>
        <equals arg1="${build.type}" arg2="release" />
        <then>
          <copy file="${basedir}/pom.xml" tofile="${maven.tmpdir}/merged_pom.xml" overwrite="true" />
          
          <!-- set the release repository as repository -->
          <property name="maven.repository.target.url" value="${maven.repository.target.releaseUrl}" />
        </then>
        <else>

          <!-- apply the snapshot-settings -->
          <fileMergeXml file1="${basedir}/pom.xml" 
                        file2="${maven.library.resfile.pom.snapshot}" 
                        dest="${maven.tmpdir}/merged_pom.xml" 
                        conf="${maven.library.resfile.pomSnapshot.merge}" />
                        
          <!-- set the snapshot repository as repository -->
          <property name="maven.repository.target.url" value="${maven.repository.target.snapshotUrl}" />
        </else>
      </if>
                
      <!-- set a property for the settings location -->
      <fileReplaceAllProperties file="${maven.library.resfile.settings.source}" destFile="${maven.tmpdir}/final_settings_source.xml" />
      <fileReplaceAllProperties file="${maven.library.resfile.settings.target}" destFile="${maven.tmpdir}/final_settings_target.xml" />
      <property name="maven.settings.source.file" location="${maven.tmpdir}/final_settings_source.xml" />
      <property name="maven.settings.target.file" location="${maven.tmpdir}/final_settings_target.xml" />
      
      <!-- set a property for the pom location -->
      <fileReplaceAllProperties file="${maven.tmpdir}/merged_pom.xml" destFile="${maven.tmpdir}/final_pom.xml" />
      <property name="maven.pom.file" location="${maven.tmpdir}/final_pom.xml" description="The settings file of this project" />
      
      <!-- initialization finshed -->
      <var name="maven.init" value="true" />
    </then>
  </if>
  
  <macrodef name="mavenCleanUp">
    <sequential>
      <delete dir="${maven.tmpdir}" />
    </sequential>
  </macrodef>
  
  <!--
    mavenSetPom - sets the properties defined by the projects pom
    -->
  <macrodef name="mavenSetPom">
    <attribute name="pomid" default="${maven.pom.property}" />
    <attribute name="pomfile" default="${maven.pom.file}" />
    
    <sequential>
    
      <!-- resolve the needed dependencies -->
      <artifact:pom id="@{pomid}" file="@{pomfile}" inheritAllProperties="false" settingsFile="${maven.settings.source.file}" />
    </sequential>
  </macrodef>
    
  <!--
    mavenResolveDependencies - sets a fileset of the passed fileset name with all dependencies 
                               for the specified scopes (which is a comma-separated-list).
    -->
  <macrodef name="mavenResolveDependencies">
    <attribute name="scope" default="compile" />
    <attribute name="scopes" default="" />
    <attribute name="fileset" default="maven.dependencies" />
    <attribute name="sourcesFileset" default="maven.srcDependencies" />
    <attribute name="javadocFileset" default="maven.javaDocDependencies" />
    <attribute name="pomid" default="${maven.pom.property}" />
    <attribute name="pomfile" default="${maven.pom.file}" />

    <sequential>
    
      <!-- try to load the default for project properties - for replacing -->
      <trycatch property="maven.tmp.error" reference="maven.tmp.errReference">
        <try>
          <mavenSetPom />
        </try>
        <catch />
        <finally />
      </trycatch>
      
      <!-- load another pom-file or another name if necessary -->
      <if>
        <or>
          <not><equals arg1="@{pomfile}" arg2="${maven.pom.file}" /></not>
          <not><equals arg1="@{pomid}" arg2="${maven.pom.property}" /></not>
        </or>
        <then>
        
          <!-- replace the properties -->
          <fileReplaceAllProperties file="@{pomfile}" destFile="${maven.tmpdir}/project_pom.xml" />
        
          <!-- load the new pom -->
          <mavenSetPom pomid="@{pomid}" pomfile="${maven.tmpdir}/project_pom.xml" />
        </then>
        <else>
          <mavenSetPom pomid="@{pomid}" pomfile="@{pomfile}" />
        </else>
      </if>
      
      <!-- fire the resolution depending on the scope -->
      <if>
        <or>
          <equals arg1="@{scopes}" arg2="" />
        </or>
        <then>
          <!-- get the dependencies -->
          <artifact:dependencies filesetId="@{fileset}" sourcesFilesetId="@{sourcesFileset}" javadocFilesetId="@{javadocFileset}" useScope="@{scope}" pomRefId="@{pomid}" settingsFile="${maven.settings.source.file}" />
        </then>
        <else>
          <!-- get the dependencies -->
          <artifact:dependencies filesetId="@{fileset}" sourcesFilesetId="@{sourcesFileset}" javadocFilesetId="@{javadocFileset}" scopes="@{scopes}" pomRefId="@{pomid}" settingsFile="${maven.settings.source.file}" />
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenInstallAttachment">
    <attribute name="file" />
    <attribute name="classifier" />
    <attribute name="type" default="jar" />
    <attribute name="pomid" default="${maven.pom.property}" />
  
    <sequential>
      <artifact:install settingsFile="${maven.settings.target.file}" pomRefId="@{pomid}">       
        <attach file="@{file}" type="@{type}" classifier="@{classifier}" />
      </artifact:install>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenInstall">
    <attribute name="file" />
    <attribute name="pomid" default="${maven.pom.property}" />

    <sequential>
    
      <!-- make sure we have the properties of the pom -->     
      <artifact:install file="@{file}" settingsFile="${maven.settings.target.file}" pomRefId="@{pomid}" />
    </sequential>
  </macrodef>
  
  <macrodef name="mavenDeployAttachment">
    <attribute name="file" />
    <attribute name="classifier" />
    <attribute name="type" default="jar" />
    <attribute name="pomid" default="${maven.pom.property}"/>
  
    <sequential>
      <artifact:deploy settingsFile="${maven.settings.target.file}" uniqueVersion="false" pomRefId="@{pomid}">
        <remoteRepository id="${maven.repository.target.repositoryId}" url="${maven.repository.target.url}" />
        
        <attach file="@{file}" type="@{type}" classifier="@{classifier}"/>
      </artifact:deploy>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenDeploy">
    <attribute name="file" />
    <attribute name="pomid" default="${maven.pom.property}"/>

    <sequential>
    
      <!-- make sure we have the properties of the pom -->
      <mavenSetPom />
      
      <artifact:deploy file="@{file}" settingsFile="${maven.settings.target.file}" uniqueVersion="false" pomRefId="@{pomid}">
        <remoteRepository id="${maven.repository.target.repositoryId}" url="${maven.repository.target.url}" />
      </artifact:deploy>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenResolveSingleDependency">
    <attribute name="groupid" />
    <attribute name="artifactid" />
    <attribute name="version" />
    <attribute name="type" default="jar" />
    <attribute name="classifier" default="" />
    <attribute name="scope" default="compile" />
    <attribute name="fileset" default="maven.dependencies" />

    <sequential>
    
      <!-- make sure we have the properties of the pom -->
      <trycatch property="maven.tmp.error" reference="maven.tmp.errReference">
        <try>
          <mavenSetPom />
        </try>
        <catch />
        <finally />
      </trycatch>
      
      <artifact:dependencies filesetId="@{fileset}" settingsFile="${maven.settings.source.file}">
        <dependency groupId="@{groupid}" artifactId="@{artifactid}" version="@{version}" scope="@{scope}" type="@{type}" classifier="@{classifier}" />
      </artifact:dependencies>
    </sequential>
  </macrodef>
    
  <macrodef name="mavenCreateIndependentPom">
    <attribute name="pomid" />
    <attribute name="groupid" />
    <attribute name="artifactid" />
    <attribute name="version" />
    <attribute name="name" />
    <attribute name="packaging" default="jar" />
   
    <sequential>
      <!-- set the variables which will be replaced -->
      <var name="maven.tmp.independentPom.groupId" value="@{groupid}" /> 
      <var name="maven.tmp.independentPom.artifactId" value="@{artifactid}" /> 
      <var name="maven.tmp.independentPom.version" value="@{version}" /> 
      <var name="maven.tmp.independentPom.name" value="@{name}" /> 
      <var name="maven.tmp.independentPom.packaging" value="@{packaging}" /> 
    
      <!-- use the template and replace -->
      <fileReplaceAllProperties file="${library_maven.basedir}/library_maven_independentPom.template" destFile="${maven.tmpdir}/@{pomid}.xml" />
      
      <!-- create the pom finally and load it -->
      <mavenSetPom pomid="@{pomid}" pomfile="${maven.tmpdir}/@{pomid}.xml" />
    </sequential>
  </macrodef>
  
  <!--
    mavenCopyDependecies - copies the dependencies of the specified scope or the specified scopes
  -->
  <macrodef name="mavenCopyDependecies">
    <attribute name="dir" default="" />
    <attribute name="srcDir" default="" />
    <attribute name="javaDocDir" default="" />
    <attribute name="scope" default="compile" />
    <attribute name="scopes" default="" />
    <attribute name="pomfile" default="${maven.pom.file}" />
    
    <sequential>
       
      <!-- get the dependencies for this build -->
      <if>
        <or>
          <equals arg1="@{scopes}" arg2="" />
        </or>
        <then>
          <!-- get the dependencies -->
          <mavenResolveDependencies scope="@{scope}" pomfile="@{pomfile}" fileset="maven.tmp.dependencies" 
                                                                          sourcesFileset="maven.tmp.srcDependencies" 
                                                                          javadocFileset="maven.tmp.javaDocDependencies" />
        </then>
        <else>
          <!-- get the dependencies -->
          <mavenResolveDependencies scopes="@{scopes}" pomfile="@{pomfile}" fileset="maven.tmp.dependencies" 
                                                                            sourcesFileset="maven.tmp.srcDependencies" 
                                                                            javadocFileset="maven.tmp.javaDocDependencies" />
        </else>
      </if>
      
      <!-- make the directory for builds -->
      <if>
        <not><equals arg1="@{dir}" arg2="" /></not>
        <then>
          <fileCleanUp dir="@{dir}" recreate="true" failonerror="false" />
          
          <!-- copy the dependent files -->
          <copy todir="@{dir}">
            <fileset refid="maven.tmp.dependencies" />
            <mapper type="flatten" />
          </copy>
        </then>
      </if>
      
      <!-- make the directory for sources -->
      <if>
        <not><equals arg1="@{srcDir}" arg2="" /></not>
        <then>
          <fileCleanUp dir="@{srcDir}" recreate="true" />
          
          <!-- copy the dependent files -->
          <copy todir="@{srcDir}">
            <fileset refid="maven.tmp.srcDependencies" />
            <mapper type="flatten" />
          </copy>
        </then>
      </if>

      <!-- make the directory for JavaDoc -->
      <if>
        <not><equals arg1="@{javaDocDir}" arg2="" /></not>
        <then>
          <fileCleanUp dir="@{javaDocDir}" recreate="true" />
          
          <!-- copy the dependent files -->
          <copy todir="@{javaDocDir}">
            <fileset refid="maven.tmp.javaDocDependencies" />
            <mapper type="flatten" />
          </copy>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <!-- 
    This macro can be used to determine the meta-information of an artifact:
      - artifactId
      - groupId
      - version
      - classifier
      - type
    Execute for each dependency by using fileCallMacroForEach.
    -->
  <macrodef name="mavenDetermineArtifactInformation">
    <attribute name="resourcefolder" />
    <attribute name="resourcefilename" />
    <attribute name="resource" />
    <attribute name="basedir" />
    <attribute name="artifactid" default="maven.tmp.artifactId" />
    <attribute name="groupid" default="maven.tmp.groupId" />
    <attribute name="version" default="maven.tmp.version" />
    <attribute name="classifier" default="maven.tmp.classifier" />
    <attribute name="type" default="maven.tmp.type" />
  
    <sequential>

      <!-- write the values as properties -->
      <var name="maven.tmp.resourcefolder" value="@{resourcefolder}" />
      <var name="maven.tmp.resourcefilename" value="@{resourcefilename}" />
      <var name="maven.tmp.resource" value="@{resource}" />
      <var name="maven.tmp.basedir" value="@{basedir}" />
      
      <var name="maven.tmp.artifactid" value="@{artifactid}" />
      <var name="maven.tmp.groupid" value="@{groupid}" />
      <var name="maven.tmp.version" value="@{version}" />
      <var name="maven.tmp.classifier" value="@{classifier}" />
      <var name="maven.tmp.type" value="@{type}" />
      
      <script language="javascript"><![CDATA[
      
      // getting the value
      var resourcefolder = project.getProperty("maven.tmp.resourcefolder");
      var resourcefilename = project.getProperty("maven.tmp.resourcefilename");
      var resource = project.getProperty("maven.tmp.resource");
      var basedir = project.getProperty("maven.tmp.basedir");
      
      // get the properties to be set
      var artifactidProp = project.getProperty("maven.tmp.artifactid");
      var groupidProp = project.getProperty("maven.tmp.groupid");
      var versionProp = project.getProperty("maven.tmp.version");
      var classifierProp = project.getProperty("maven.tmp.classifier");
      var typeProp = project.getProperty("maven.tmp.type");
      
      // determine the values
      var baseFolder = new java.io.File(basedir);
      var file = new java.io.File(resourcefilename);
      var fileName = file.getName();
      var resFolder = new java.io.File(resourcefolder);

      // get the group identifier
      var groupid = resFolder.getParentFile().getParent().replace(baseFolder.getAbsolutePath(), "");
      groupid = groupid.replace("\\", ".").replace("/", ".");
      groupid = groupid.startsWith(".") ? groupid.substring(1) : groupid;
      
      // get the version
      var version = resFolder.getName();
            
      // get the type
      var posLastDot = fileName.lastIndexOf(".");
      var type = posLastDot == -1 ? "" : fileName.substring(posLastDot + 1);
      
      // get the classifier
      var classifier = posLastDot == -1 ? fileName : fileName.substring(0, posLastDot);
      var posLastSlash = classifier.lastIndexOf("-");
      classifier = posLastSlash == -1 ? "" : classifier.substring(posLastSlash + 1);
      classifier = classifier == "SNAPSHOT" || classifier == version ? "" : classifier;
      
      // get the artifact
      var artifactid = fileName.substring(0, fileName.lastIndexOf(version) - 1);
      
      // set the properties
      var setVar = project.createTask("var");
      setVar.setName(artifactidProp); setVar.setValue(artifactid); setVar.execute();
      setVar.setName(groupidProp); setVar.setValue(groupid); setVar.execute();
      setVar.setName(versionProp); setVar.setValue(version); setVar.execute();
      setVar.setName(classifierProp); setVar.setValue(classifier); setVar.execute();
      setVar.setName(typeProp); setVar.setValue(type); setVar.execute();
      ]]></script>
    
    </sequential>
  </macrodef>
  
  <macrodef name="mavenCopySingleDependency">
    <attribute name="artifactid" />
    <attribute name="groupid" />
    <attribute name="version" />
    <attribute name="classifier" />
    <attribute name="type" default="jar" />
    <attribute name="dir" />
    <attribute name="failonerror" default="true" />
    <attribute name="property" default="maven.tmp.singleDependency" />
  
    <sequential>
    
      <!-- unset the property -->
      <var name="@{property}" unset="true" />
      <var name="maven.tmp.wasError" unset="false" />
    
      <if>
        <or>
          <equals arg1="@{failonerror}" arg2="y" />
          <equals arg1="@{failonerror}" arg2="yes" />
          <equals arg1="@{failonerror}" arg2="true" />
        </or>
        <then>
          <!-- resolve the dependency -->
          <mavenResolveSingleDependency groupid="@{groupid}" artifactid="@{artifactid}" version="@{version}" 
                                        type="@{type}" classifier="@{classifier}" fileset="maven.tmp.dependencies" />
                                        
          <copy todir="@{dir}">
            <restrict>
              <fileset refid="maven.tmp.dependencies" />
              <rsel:name regex=".*[\\/]\Q@{artifactid}-@{version}\E(?:(?:\Q-@{classifier}\E)|)\Q.@{type}\E" />
            </restrict>
            <mapper type="flatten" />
          </copy>
        </then>
        <else>
          <trycatch property="maven.tmp.error" reference="maven.tmp.errReference">
            <try>
              <!-- resolve the dependency -->
              <mavenResolveSingleDependency groupid="@{groupid}" artifactid="@{artifactid}" version="@{version}" 
                                            type="@{type}" classifier="@{classifier}" fileset="maven.tmp.dependencies" />
                                            
              <copy todir="@{dir}">
                <restrict>
                  <fileset refid="maven.tmp.dependencies" />
                  <rsel:name regex=".*[\\/]\Q@{artifactid}-@{version}\E(?:(?:\Q-@{classifier}\E)|)\Q.@{type}\E" />
                </restrict>
                <mapper type="flatten" />
              </copy>
            </try>
            <catch><var name="maven.tmp.wasError" value="true" /></catch>
            <finally />
          </trycatch>
        </else>
      </if>
      
      <!-- set the property with the value -->
      <if>
        <equals arg1="${maven.tmp.wasError}" arg2="true" />
        <then><var name="@{property}" unset="true" /></then>
        <elseif>
          <equals arg1="@{classifier}" arg2="" />
          <then><var name="@{property}" value="@{dir}/@{artifactid}-@{version}.@{type}" /></then>
        </elseif>
        <else><var name="@{property}" value="@{dir}/@{artifactid}-@{version}-@{classifier}.@{type}" /></else>
      </if>
    </sequential>
  </macrodef>
  
  <!--
    The action attribute specifies if the resources should be deployed (i.e. action == "deploy") or installed (i.e. action == "install")
    -->
  <macrodef name="mavenRegisterResourceFromSource">
    <attribute name="resourcefolder" />
    <attribute name="resourcefilename" />
    <attribute name="resource" />
    <attribute name="basedir" />
    <attribute name="action" default="deploy" />
    <attribute name="attachments" default="" />
    
    <sequential>
            
      <!-- get the information -->
      <mavenDetermineArtifactInformation resourcefolder="@{resourcefolder}" resourcefilename="@{resourcefilename}" resource="@{resource}" basedir="@{basedir}" />
    
      <!-- do type and classifier specific stuff -->
      <if>
        <equals arg1="${maven.tmp.type}" arg2="pom" />
        <then>
          <var name="maven.tmp.tasktype" value="pom" />
        </then>
        <elseif>
          <equals arg1="${maven.tmp.classifier}" arg2="" />
          <then>
            <!-- it's the artifact -->
            <var name="maven.tmp.tasktype" value="artifact" />
          </then>
        </elseif>
        <else>
          <!-- it's an attachment of the artifact -->
          <var name="maven.tmp.tasktype" value="attachment" />
        </else>
      </if>

      <!-- do nothing if it's a pom -->
      <if>
        <not><equals arg1="${maven.tmp.tasktype}" arg2="pom" /></not>
        <then>
          
          <!-- generate a folder to store the files -->
          <generateUUID property="maven.tmp.dependencyFolderName" />
          <var name="maven.tmp.dependencyFolder" value="${maven.tmpdir}/${maven.tmp.dependencyFolderName}" />
          <fileCleanUp dir="${maven.tmp.dependencyFolder}" recreate="true" />
        
          <!-- resolve the pom dependency -->
          <mavenCopySingleDependency groupid="${maven.tmp.groupId}" artifactid="${maven.tmp.artifactId}" version="${maven.tmp.version}" 
                                     type="pom" classifier="" dir="${maven.tmp.dependencyFolder}" property="maven.tmp.singleDependencyPomFile" />
          <mavenSetPom pomid="maven.tmp.singleDependencyPomId" pomfile="${maven.tmp.singleDependencyPomFile}" />
        
          <!-- finally check the action and do a deploy or an install -->
          <if>
            <equals arg1="@{action}" arg2="deploy" />
            <then>
            
              <!-- it could be that a RELEASE cannot be overwritten, therefore wrap it and check for SNAPSHOT errors -->
              <trycatch property="maven.tmp.error" reference="maven.tmp.errReference">
                <try>

                  <!-- get attachments -->
                  <if>
                    <equals arg1="${maven.tmp.tasktype}" arg2="artifact" />
                    <then>
                      <!-- deploy the artifact -->
                      <mavenDeploy file="@{resource}" pomid="maven.tmp.singleDependencyPomId" />

                      <!-- get each defined attachment -->
                      <mavenCopyAndRegisterAttachments groupid="${maven.tmp.groupId}" artifactid="${maven.tmp.artifactId}" version="${maven.tmp.version}" type="${maven.tmp.type}" failonerror="false"
                                                       classifiers="@{attachments}" dir="${maven.tmp.dependencyFolder}" action="@{action}" pomid="maven.tmp.singleDependencyPomId" />
                    </then>
                    <else>
                      <mavenDeployAttachment file="@{resource}" classifier="${maven.tmp.classifier}" type="${maven.tmp.type}" pomid="maven.tmp.singleDependencyPomId" />
                    </else>
                  </if>
                </try>
                <catch>
                  <if>
                    <contains string="${maven.tmp.version}" substring="SNAPSHOT" />
                    <then><fail>The ${maven.tmp.artifactId}-${maven.tmp.version} could not be uploaded</fail></then>
                    <else><echo level="debug">The ${maven.tmp.artifactId}-${maven.tmp.version} could not be uploaded</echo></else>
                  </if>
                </catch>
                <finally />
              </trycatch>
            </then>
            <else>

              <!-- get attachments -->
              <if>
                <equals arg1="${maven.tmp.tasktype}" arg2="artifact" />
                <then>
                  <!-- deploy the artifact -->
                  <mavenInstall file="@{resource}" pomid="maven.tmp.singleDependencyPomId" />

                  <!-- get each defined attachment -->
                  <mavenCopyAndRegisterAttachments groupid="${maven.tmp.groupId}" artifactid="${maven.tmp.artifactId}" version="${maven.tmp.version}" type="${maven.tmp.type}" failonerror="false"
                                                   classifiers="@{attachments}" dir="${maven.tmp.dependencyFolder}" action="@{action}" pomid="maven.tmp.singleDependencyPomId" />
                </then>
                <else>
                  <mavenInstallAttachment file="@{resource}" classifier="${maven.tmp.classifier}" type="${maven.tmp.type}" pomid="maven.tmp.singleDependencyPomId" />
                </else>
              </if>
            </else>
          </if>
          
          <!-- cleanUp -->
          <fileCleanUp dir="${maven.tmp.dependencyFolder}" recreate="false" />
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenCopyAndRegisterAttachments">
    <attribute name="artifactid" />
    <attribute name="groupid" />
    <attribute name="version" />
    <attribute name="classifiers" />
    <attribute name="type" default="jar" />
    <attribute name="dir" />
    <attribute name="failonerror" default="true" />
    <attribute name="pomid" />
    <attribute name="action" default="deploy" />
    
    <sequential>

      <!-- write the argument as properties -->
      <var name="maven.tmp.artifactid" value="@{artifactid}" />
      <var name="maven.tmp.groupid" value="@{groupid}" />
      <var name="maven.tmp.version" value="@{version}" />
      <var name="maven.tmp.classifiers" value="@{classifiers}" />
      <var name="maven.tmp.type" value="@{type}" />
      <var name="maven.tmp.dir" value="@{dir}" />
      <var name="maven.tmp.failonerror" value="@{failonerror}" />
      <var name="maven.tmp.pomid" value="@{pomid}" />
      <var name="maven.tmp.action" value="@{action}" />
      
      <script language="javascript"><![CDATA[
      
      // getting the arguments
      var artifactid = project.getProperty("maven.tmp.artifactid");
      var groupid = project.getProperty("maven.tmp.groupid");
      var version = project.getProperty("maven.tmp.version");
      var classifiers = project.getProperty("maven.tmp.classifiers");
      var type = project.getProperty("maven.tmp.type");
      var dir = project.getProperty("maven.tmp.dir");
      var failonerror = project.getProperty("maven.tmp.failonerror");
      var pomid = project.getProperty("maven.tmp.pomid");
      var action = project.getProperty("maven.tmp.action");
      
      // create the task and execute
      var runMacro = project.createTask("mavenCopyAndRegisterAttachment");
      runMacro.setDynamicAttribute("artifactid", artifactid);
      runMacro.setDynamicAttribute("groupid", groupid);
      runMacro.setDynamicAttribute("version", version);
      runMacro.setDynamicAttribute("type", type);
      runMacro.setDynamicAttribute("dir", dir);
      runMacro.setDynamicAttribute("failonerror", failonerror);
      runMacro.setDynamicAttribute("pomid", pomid);
      runMacro.setDynamicAttribute("action", action);
      
      // get the specified classifiers and execute for each
      var cf = classifiers.split(",");
      for (var i = 0; i < cf.length; i++) {
        var classifier = cf[i].trim();
        
        runMacro.setDynamicAttribute("classifier", classifier);
        runMacro.execute(); 
      }
      ]]></script>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenCopyAndRegisterAttachment">
    <attribute name="artifactid" />
    <attribute name="groupid" />
    <attribute name="version" />
    <attribute name="classifier" />
    <attribute name="type" default="jar" />
    <attribute name="dir" />
    <attribute name="failonerror" default="true" />
    <attribute name="pomid" />
    <attribute name="action" default="deploy" />
    
    <sequential>
    
      <!-- get each defined attachment -->
      <mavenCopySingleDependency groupid="@{groupid}" artifactid="@{artifactid}" version="@{version}" failonerror="@{failonerror}"
                                 type="@{type}" classifier="@{classifier}" dir="@{dir}" property="maven.tmp.singleDependencyAttachmentFile" />
      <if>
        <isset property="maven.tmp.singleDependencyAttachmentFile" />
        <then>
        
          <if>
            <equals arg1="@{action}" arg2="deploy" />
            <then>
            
              <trycatch property="maven.tmp.error" reference="maven.tmp.errReference">
                <try>
                  <mavenDeployAttachment file="${maven.tmp.singleDependencyAttachmentFile}" classifier="@{classifier}" type="@{type}" pomid="@{pomid}" />
                </try>
                <catch>
                  <if>
                    <contains string="@{version}" substring="SNAPSHOT" />
                    <then><fail>The attachment @{artifactid}-@{version}-@{classifier} could not be uploaded</fail></then>
                    <else><echo level="debug">The attachment @{artifactid}-@{version}-@{classifier} could not be uploaded</echo></else>
                  </if>
                </catch>
                <finally />
              </trycatch>
            </then>
            <else>
              <mavenInstallAttachment file="${maven.tmp.singleDependencyAttachmentFile}" classifier="@{classifier}" type="@{type}" pomid="@{pomid}" />
            </else>
          </if>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenCheckSnapshotDependencies">
    <sequential>
      <mavenCheckStatus scope="compile" />
    
      <if>
        <not><equals arg1="${maven.tmp.snapshotCounter}" arg2="0" /></not>
        <then>
          <fail>There are still ${maven.tmp.snapshotCounter} snapshot dependencies, please resolve those first</fail>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenCheckStatus">
    <attribute name="scope" default="compile" />
    <attribute name="scopes" default="" />
    <attribute name="snapshotProperty" default="maven.tmp.snapshotCounter" />
    <attribute name="releaseProperty" default="maven.tmp.releaseCounter" />
    
    <sequential>
    
      <!-- get all the dependencies -->
      <mavenResolveDependencies scope="@{scope}" scopes="@{scopes}" fileset="maven.tmp.dependencies" />
      
      <!-- count the values  -->
      <var name="@{snapshotProperty}" value="" unset="true" />
      <var name="@{releaseProperty}" value="" unset="true" />
      <fileCallMacroForEach macro="mavenCountTypes" parameters="snapshotProperty=[[@{snapshotProperty}]];releaseProperty=[[@{releaseProperty}]]">
        <fileset refid="maven.tmp.dependencies" />
      </fileCallMacroForEach>
    </sequential>
  </macrodef>
  
  <macrodef name="mavenCountTypes">
    <attribute name="resourcefolder" />
    <attribute name="resourcefilename" />
    <attribute name="resource" />
    <attribute name="basedir" />
    <attribute name="snapshotProperty" default="maven.tmp.snapshotCounter" />
    <attribute name="releaseProperty" default="maven.tmp.releaseCounter" />
    
    <sequential>
            
      <!-- get the information -->
      <mavenDetermineArtifactInformation resourcefolder="@{resourcefolder}" resourcefilename="@{resourcefilename}" resource="@{resource}" basedir="@{basedir}" />
      
      <!-- increase -->      
      <if>
        <contains string="${maven.tmp.version}" substring="SNAPSHOT" />
        <then><incProperty property="@{snapshotProperty}" /></then>
        <else><incProperty property="@{releaseProperty}" /></else>
      </if>
    </sequential>
  </macrodef>
  
  <target name="copyDeps">
    <fileCleanUp dir="${maven.depsdir}" recreate="true" />
    <mavenCopyDependecies dir="${maven.depsdir}" />
  </target>
</project>