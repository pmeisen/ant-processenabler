<!--
  Library which adds some macros and targets for server starting and stoping
  
  Created on: 01.03.2012
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    01.03.2012
      - Creation of library
  -->
<project name="library_server">
  <property name="server.library.version" value="1.0.1" description="The current version of the library" />
  <dirname property="library_server.basedir" file="${ant.file.library_server}"/>

  <property name="server.library.resfile.serverSettings" location="${library_server.basedir}/library_server-serverSettings.xml" description="The settings for the server to be used" />
  
  <property name="server.renameSettings" value="true" description="true if the settings file should be renamed to fit the general requirements, otherwise false i.e. the file will be named as provided" />
  <property name="server.generic.class" value="net.meisen.general.server.Server" description="The default generic server class used" />
  <property name="server.type" value="" description="The server type to be used, currently valid tomcat6" />
  <property name="server.dir" value="applicationServer" description="The name of the main-directory which contains application server specific resources" />
  
  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  
  <macrodef name="serverGenericStart">
    <attribute name="appPort" />
    <attribute name="port" />
    
    <attribute name="appServerSettings" default="${server.library.resfile.serverSettings}" />
    <attribute name="renameServerSettings" default="${server.renameSettings}" />
    
    <attribute name="serverClass" default="${server.generic.class}" />
    <attribute name="serverResources" default="" />
    <attribute name="classpathId" default="" />
    
    <sequential>

      <!-- define variables to be replaced in the settings -->
      <var name="server.tmp.generic.start.port" value="@{port}" />
      <var name="server.tmp.generic.main.port" value="@{appPort}" />
      
      <!-- create a folder for the resources of the server -->
      <if>
        <equals arg1="@{serverResources}" arg2="" />
        <then>
          <generateUUID property="server.tmp.uuid" />
          <var name="server.tmp.resources" value="${main.tmpdir}/${server.tmp.uuid}" />
        </then>
        <else><var name="server.tmp.resources" value="@{serverResources}" /></else>
      </if>
      <mkdir dir="${server.tmp.resources}" />
      
      <!-- create the settings for the server -->
      <varNormalizeBoolean property="server.tmp.renameServerSettings" value="@{renameServerSettings}" />
      <if>
        <equals arg1="${server.tmp.renameServerSettings}" arg2="true" />
        <then>
          <fileReplaceAllProperties file="@{appServerSettings}" destFile="${server.tmp.resources}/serverSettings.xml" force="true" />
        </then>
        <else>
          <fileInfo file="@{appServerSettings}" propertyPrefix="server.tmp.settings" />
          <fileReplaceAllProperties file="@{appServerSettings}" destFile="${server.tmp.resources}/${server.tmp.settings.name}" force="true" />          
        </else>
      </if>
      
      <!-- create the additional classpath items -->
      <if>
        <equals arg1="@{classpathId}" arg2="" />
        <then>
          <path id="server.tmp.refAddedClasspathId" />
        </then>
        <else>
          <path id="server.tmp.refAddedClasspathId">
            <fileset refid="@{classpathId}" />
          </path>
        </else>
      </if>
      <path id="server.tmp.refAntClasspathId">
        <pathelement path="${java.class.path}"/>
      </path>
      
      <!-- check if a server is on the path -->
      <findJarFile property="server.tmp.hasServerClass" class="net.meisen.general.server.Server" pathId="server.tmp.refAddedClasspathId" excludeAntClasspath="true" />
      
      <!-- check if a logging is on the path -->
      <findJarFile property="server.tmp.hasLoggerClass" class="org.slf4j.LoggerFactory" pathId="server.tmp.refAddedClasspathId" excludeAntClasspath="true" />
      
      <!-- define what we need from the additional libraries -->
      <var name="server.tmp.addedLibraries" unset="true" />
      <if>
        <isset property="server.tmp.hasServerClass" />
        <then>
          <pathconvert property="server.tmp.addedLibraries">
            <path refid="server.tmp.refAddedClasspathId" />
          </pathconvert>
        </then>
      </if>
      
      <!-- define what we need from ant -->
      <var name="server.tmp.antLibraries" unset="true" />
      <if>
        <and>
          <isset property="server.tmp.hasServerClass" />
          <isset property="server.tmp.hasLoggerClass" />
        </and>
        <!-- if we have a server with logging keep nothing -->
        <then>
        </then>
        <!-- if we have a server without logging keep the logging only -->
        <elseif>
          <isset property="server.tmp.hasServerClass" />
          <then>
            <pathconvert property="server.tmp.antLibraries">
              <restrict>
                <path refid="server.tmp.refAntClasspathId" />
                <rsel:name regex="slf.*" xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors" />
              </restrict>
            </pathconvert>
          </then>
        </elseif>
        <!-- if we have just logging, remove it -->
        <elseif>
          <isset property="server.tmp.hasLoggerClass" />
          <then>
            <pathconvert property="server.tmp.antLibraries">
              <restrict>
                <path refid="server.tmp.refAntClasspathId" />
                <rsel:not xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors">
                  <rsel:name regex="slf.*" />
                </rsel:not>
              </restrict>
            </pathconvert>
          </then>
        </elseif>
        <!-- if we don't have a server and no logging -->
        <else>
          <pathconvert property="server.tmp.antLibraries">
            <path refid="server.tmp.refAntClasspathId" />
          </pathconvert>
        </else>
      </if>

      <!-- start the server -->
      <java classname="@{serverClass}" fork="true">        
        <classpath>
          <pathelement path="${server.tmp.resources}" />
          <pathelement path="${server.tmp.antLibraries}" />
          <pathelement path="${server.tmp.addedLibraries}" />
        </classpath>
      </java>

    </sequential>
  </macrodef>
  
  <macrodef name="serverGenericStop">
    <attribute name="port" />
    
    <sequential>
      
      <if>
        <socket server="localhost" port="@{port}"/>
        <then>
          <!-- define variables to be replaced in the settings -->
          <var name="server.tmp.generic.stop.port" value="@{port}" />
        
          <!-- shutdown the server -->
          <script language="javascript"><![CDATA[
            var port = project.getProperty("server.tmp.generic.stop.port");
            var controller = new net.meisen.general.server.control.ServerController("localhost", port);
            
            // send the shutdown signal
            controller.sendShutdown();
          ]]></script>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="serverGenericWait">
    <attribute name="port" />
    <attribute name="timeout" default="5000" />
    
    <sequential>
      <!-- make sure the variable is not set -->
      <var name="server.tmp.server.timeout" unset="true" />

      <!-- wait for the server to be started -->
      <waitfor maxwait="@{timeout}" maxwaitunit="millisecond" checkevery="500" timeoutproperty="server.tmp.server.timeout">
        <socket server="localhost" port="@{port}"/>
      </waitfor>
      
      <!-- make sure the server is available now -->
      <if>
        <isset property="server.tmp.server.timeout" />
        <then>
          <fail>The generic server on port '@{port}' is not available after '@{timeout}' milliseconds.</fail>
        </then>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="serverHttpReachable">
    <attribute name="url" />
    <attribute name="property" default="server.reachable" />

    <sequential>
      <if>
        <http url="@{url}" errorsBeginAt="500" />
        <then>
          <var name="@{property}" value="true" />
        </then>
        <else>
          <var name="@{property}" value="false" />
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="serverHttpNotReachable">
    <attribute name="url" />
    <attribute name="property" default="server.notreachable" />

    <sequential>
      <trycatch property="server.tmp.error" reference="server.tmp.errReference">
        <try>
          <if>
            <http url="@{url}" errorsBeginAt="500" />
            <then>
              <var name="@{property}" value="false" />
            </then>
            <else>
              <var name="@{property}" value="true" />
            </else>
          </if>
        </try>
        <catch>
          <!-- in the case of any error -->
          <var name="@{property}" value="false" />
        </catch>
        <finally />
      </trycatch>
    </sequential>
  </macrodef>
  
  <!-- 
    startTomCat - starts a TomCat server
    -->
  <macrodef name="startTomCat">
    <attribute name="webapp" default="${server.webapp.dir}" />
    
    <sequential> 
      <java jar="@{webapp}/../bin/bootstrap.jar" fork="true">
        <jvmarg value="-Dcatalina.home=${server.webapp.dir}/../" />
        <jvmarg value="-Dcatalina.base=${server.webapp.dir}/../" />

        <jvmarg value="-Xms512m" />
        <jvmarg value="-XX:MaxPermSize=512m" />
      </java>
    </sequential> 
  </macrodef>
  
  <!-- 
    stopTomCat - stops a TomCat server
    -->
  <macrodef name="stopTomCat">
    <attribute name="webapp" default="${server.webapp.dir}" />

    <sequential>    
      <java jar="@{webapp}/../bin/bootstrap.jar" fork="true">
      <jvmarg value="-Dcatalina.home=@{webapp}/../" />
      <jvmarg value="-Dcatalina.base=@{webapp}/../" />
      <arg line="stop"/>
      </java>
    </sequential>
  </macrodef>
  
  <macrodef name="serverLoadProperties">
    <attribute name="appDir" default="${server.dir}" />
    <attribute name="serverType" default="" />
    
    <sequential>
    
      <!-- load the properties of the application server if those exists -->
      <if>
        <or>
          <equals arg1="@{serverType}" arg2="" />
        </or>
        <then>
          <fail>Please specify a server type, prior to loading it's properties</fail>
        </then>
        <elseif>
          <or>
            <available file="@{appDir}/@{serverType}/config.properties" />
            <available file="@{appDir}/@{serverType}/override.properties" />
          </or>
          <then>
            <echo level="info">Loading server type specific properties</echo>
            
            <var file="@{appDir}/@{serverType}/config.properties" />
            <var file="@{appDir}/@{serverType}/override.properties" />
          </then>
        </elseif>
        <else>
          <echo level="info">No additional properties found for server type: ${server.type}</echo>
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <!--
    serverStart - target to directly start a TomCat server
    -->
  <target name="serverStart">
    <if>
      <or>
        <equals arg1="${server.type}" arg2="tomcat6" />
      </or>
      <then>
        <startTomCat />
      </then>
      <else>
        <fail>No server specified, please specify the server to be used</fail>
      </else>
    </if>
  </target>
  
  <!--
    serverStop - target to directly stop the current server
    -->
  <target name="serverStop">
    <if>
      <or>
        <equals arg1="${server.type}" arg2="tomcat6" />
      </or>
      <then>
        <stopTomCat />
      </then>
      <else>
        <fail>No server specified, please specify the server to be used</fail>
      </else>
    </if>
  </target>
  
  <target name="serverUseTomCat">
    <var name="server.type" value="tomcat6" />
    <serverLoadProperties serverType="${server.type}" />
  </target>
</project>