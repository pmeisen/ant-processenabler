<!--
  Library which adds some macros and targets for test operations
  
  Created on: 12.03.2012
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    01.03.2012
      - Creation of library
  -->
<project name="library_test">
  <property name="test.library.version" value="1.0.2" description="The current version of the library" />
  <dirname property="library_test.basedir" file="${ant.file.library_test}"/>
  
  <property name="test.source.dir" value="test" description="Project test's source-code directory directory" />
  <property name="test.binary.dir" value="bin" description="Project test's binary directory" />
  <property name="test.test.dir" value="_test" description="Project test output directory" />
  <property name="test.srcdir" location="${test.source.dir}" description="Project test's source-code directory (full path)" />
  <property name="test.dir" location="${test.test.dir}" description="Project test output directory" />
  <property name="test.bindir" location="${test.test.dir}/${test.binary.dir}" description="Project test's binary directory" />
  <property name="test.report.file" value="report" description="Name of the report which should be created (will be .txt file)" />
  <property name="test.suite.class" value="" description="The test-suite class started for the test" />

  <property name="test.init" value="false" description="For internal usage only, please do not modify this property by a file" />
            
  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <!--
    initialize - do some things that have to be done
    -->
  <if>
    <equals arg1="${test.init}" arg2="false" />
    <then>

      <!-- create the repository directory -->
      <mkdir dir="${test.dir}" />
      <mkdir dir="${test.bindir}" />
      
      <!-- initialization finshed -->
      <var name="test.init" value="true" />
    </then>
  </if>
  
  <macrodef name="testBuild">
    <attribute name="classPathFileSetId" default="test.classpath" />
    <attribute name="excludeSourcePattern" default="" />
  
    <sequential>

      <!-- set the classpath to be used -->
      <if>
        <equals arg1="@{classPathFileSetId}" arg2="test.classpath" />
        <then>
        
          <!-- get the default dependencies for this test -->
          <mavenResolveDependencies fileset="@{classPathFileSetId}" scope="test" pomid="test.tmp.pomBuild" />
        </then>
        <else>
        
          <!-- make sure the information of the build are available -->
          <mavenSetPom pomid="test.tmp.pomBuild" />
        </else>
      </if>

      <!-- lets build the test-files -->
      <compile srcdir="${test.srcdir}" destdir="${test.bindir}" debug="${build.tmp.debug}" excludes="@{excludeSourcePattern}">
        <classpath>
          <fileset dir="${ant.home}/lib" includes="junit-*.jar" />
          <fileset refid="@{classPathFileSetId}" />
          <pathelement location="${build.buildFile}" />
        </classpath>
      </compile>

      <!-- set the jar files -->
      <var name="test.testFile" value="${test.dir}/${test.tmp.pomBuild.artifactId}-${test.tmp.pomBuild.version}-${maven.attachment.test}.jar" />

      <!-- wrap it all to a jar -->
      <jar destfile="${test.testFile}" basedir="${test.bindir}">

        <!-- write the manifest -->
        <manifest>
          <attribute name="Built-By" value="${user.name}" />
          <attribute name="Built-Date" value="${NOW}" />
          
          <attribute name="Implementation-Vendor" value="${main.vendor}" />
          <attribute name="Implementation-Title" value="${test.tmp.pomBuild.name} (${maven.attachment.test})" />
          <attribute name="Implementation-Version" value="${test.tmp.pomBuild.version}" />
          
          <attribute name="SVN-Revision" value="${svn.info.lastRev}" /> 
        </manifest>

        <!-- add the resources -->
        <fileset dir="${test.srcdir}" excludes="**/*.java" />
      </jar>
    
    </sequential>
  </macrodef>
  
  <macrodef name="testPackSource">
    <attribute name="excludeSourcePattern" default="" />
    
    <sequential>
      <mavenSetPom pomid="test.tmp.pomBuild" />
      
      <jar destfile="${test.dir}/${test.tmp.pomBuild.artifactId}-${test.tmp.pomBuild.version}-${maven.attachment.testsources}.jar" basedir="${test.srcdir}" 
           includes="**/*.java" excludes="@{excludeSourcePattern}">

        <!-- write the manifest -->
        <manifest>
          <attribute name="Built-By" value="${user.name}" />
          <attribute name="Built-Date" value="${NOW}" />
          
          <attribute name="Implementation-Vendor" value="${main.vendor}" />
          <attribute name="Implementation-Title" value="${test.tmp.pomBuild.name} (${maven.attachment.testsources})" />
          <attribute name="Implementation-Version" value="${test.tmp.pomBuild.version}" />
          
          <attribute name="SVN-Revision" value="${svn.info.lastRev}" /> 
        </manifest>
      </jar>
      <var name="test.testSourceFile" value="${test.dir}/${test.tmp.pomBuild.artifactId}-${test.tmp.pomBuild.version}-${maven.attachment.testsources}.jar" />
    </sequential>
  </macrodef>
  
  <!--
    buildRemovePreBuilds - clean up all the pre-builds
    -->
  <macrodef name="testTest">
    <attribute name="test" default="${test.suite.class}" />
    <attribute name="classPathFileSetId" default="test.classpath" />
    <attribute name="failOnError" default="true" />
    <attribute name="includeSources" default="false" />
    <attribute name="excludeSourcePattern" default="" />
  
    <sequential>
    
      <!-- check the buildFile, before its used -->
      <if>
        <or>
          <not><isset property="build.buildFile"/></not>
          <equals arg1="${build.buildFile}" arg2="" />
        </or>
        <then>
          <fail>No latest build found, nothing can be tested</fail>
        </then>
        <elseif>
          <equals arg1="@{test}" arg2="" />
          <then>
            <echo level="warn">No test suite defined, nothing to be tested</echo>
          </then>
        </elseif>
        <else>
          <testBuild classPathFileSetId="@{classPathFileSetId}" excludeSourcePattern="@{excludeSourcePattern}" />
          
          <!-- check if the sources should be on the class-path -->
          <if>
            <or>
              <equals arg1="@{includeSources}" arg2="y" />
              <equals arg1="@{includeSources}" arg2="yes" />
              <equals arg1="@{includeSources}" arg2="true" />
            </or>
            <then>
              <testPackSource excludeSourcePattern="@{excludeSourcePattern}" />
              <var name="test.tmp.testSourceFile" value="${test.testSourceFile}" />
            </then>
            <else>
              <var name="test.tmp.testSourceFile" value="${test.testFile}" />
            </else>
          </if>

          <!-- finally lets run the tests -->
          <junit printsummary="false" tempdir="${java.io.tmpdir}" fork="true" dir="${test.dir}">
            <formatter type="plain" usefile="false"/>
            <formatter type="plain" usefile="true"/>

            <!-- set the class-path for the jar and the resources -->
            <classpath>
              <!-- the dependencies -->
              <fileset refid="@{classPathFileSetId}" />
              
              <!-- add the junit library -->
              <fileset dir="${ant.home}/lib" includes="junit-*.jar" />
              
              <!-- the build test-file -->
              <pathelement location="${test.testFile}" />
              
              <!-- the source only set if those are available -->
              <pathelement location="${test.tmp.testSourceFile}" />

              <!-- the build file to be tested -->
              <pathelement location="${build.buildFile}" />

              <!-- the additional resources -->
              <pathelement path="${build.resourcedir}" />
            </classpath>
            
            <test name="@{test}" todir="${test.dir}" outfile="${test.report.file}" failureproperty="test.tmp.failure" />
          </junit>
          
          <if>
            <and>
              <equals arg1="${test.tmp.failure}" arg2="true" />
              <or>
                <equals arg1="@{failOnError}" arg2="y" />
                <equals arg1="@{failOnError}" arg2="yes" />
                <equals arg1="@{failOnError}" arg2="true" />
              </or>
            </and>
            <then>
              <fail message="Test failure detected, check test results." if="test.tmp.failure" />
            </then>
          </if>
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <macrodef name="testDeployLatestBuild">
    <sequential>
      <if>
        <or>
          <not><isset property="test.testFile"/></not>
          <equals arg1="${test.testFile}" arg2="" />
          <not><isset property="test.testSourceFile"/></not>
          <equals arg1="${test.testSourceFile}" arg2="" />
        </or>
        <then>
          <fail>No latest test build found, nothing is deployed</fail>
        </then>
        <else>
          <mavenDeployAttachment file="${test.testFile}" classifier="${maven.attachment.test}" />
          <mavenDeployAttachment file="${test.testSourceFile}" classifier="${maven.attachment.testsources}" />
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <!--
    testRemovePreBuilds - clean up all the pre-builds
    -->
  <macrodef name="testRemovePreBuilds">
    <sequential>
      <fileCleanUp dir="${test.bindir}" recreate="true" />
    </sequential>
  </macrodef>
    
  <macrodef name="testCleanUp">
    <attribute name="complete" default="false" />

    <sequential>
      <if>
        <or>
          <equals arg1="@{complete}" arg2="y" />
          <equals arg1="@{complete}" arg2="yes" />
          <equals arg1="@{complete}" arg2="true" />
        </or>
        <then>
          <testRemovePreBuilds />
        </then>
      </if>

      <!-- cleanup a little -->
      <fileCleanUp dir="${test.tmpdir}" recreate="false" />
      
      <!-- reset the latest builds -->
      <var name="test.testFile" value="" />
      <var name="test.testSourceFile" value="" />
    </sequential>
  </macrodef>
    
  <!-- targets defined by this build -->
  <target name="test" depends="build">
    <testTest />
  </target>
  
  <target name="testBuild" depends="build">
    <testBuild />
  </target>
  
  <target name="testSources">
    <testPackSource />
  </target>
  
  <target name="testRemovePreBuilds">
    <testRemovePreBuilds />
  </target>
  
  <target name="testDeploy" depends="testBuild,testSources">
    <testDeployLatestBuild />
  </target>
</project>