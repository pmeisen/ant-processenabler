<!--
  Library which adds some macros and targets for file operations/modifications
  
  Created on: 17.05.2013
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    01.03.2012
      - Creation of library
    17.05.2013
      - default templates are now read when passing no value as parameter
  -->
<project name="library_eclipse">
  <property name="eclipse.library.version" value="1.3.0" description="The current version of the library" />
  <dirname property="library_eclipse.basedir" file="${ant.file.library_eclipse}"/>
  
  <property name="eclipse.library.resfile.maven.eclipseMerge" location="${main.root}/maven/pomEclipse_xmlMerge.properties" />
  <property name="eclipse.library.resfile.template.project" location="${library_eclipse.basedir}/library_eclipse_project.template" description="The name of the project template" />
  <property name="eclipse.library.resfile.template.classpath" location="${library_eclipse.basedir}/library_eclipse_classpath.template" description="The name of the classpath template" />
  <property name="eclipse.library.resfile.eclipse.classpathMerge" location="${library_eclipse.basedir}/library_eclipse_classpath_xmlMerge.properties" />
  
  <property name="eclipse.template.project" value="${eclipse.library.resfile.template.project}" />
  <property name="eclipse.template.classpath" value="${eclipse.library.resfile.template.classpath}" />
  
  <property name="eclipse.eclipse.dir" value="_eclipse" description="Project binary directory" />
  <property name="eclipse.lib.dir" value="lib" description="Project binary directory" />
  <property name="eclipse.src.dir" value="src" description="Project source directory" />
  <property name="eclipse.javadoc.dir" value="javadoc" description="Project JavaDoc directory" />
  <property name="eclipse.settings.dir" value=".settings" description="Settings dir of eclipse" />
  <property name="eclipse.launcher.dir" value=".launcher" description="Launcher dir of eclipse" />
  <property name="eclipse.dir" location="${eclipse.eclipse.dir}" description="Directory for files only needed by eclipse" />
  <property name="eclipse.libdir" location="${eclipse.dir}/${eclipse.lib.dir}" description="Directory for libraries only needed by eclipse" />
  <property name="eclipse.srcdir" location="${eclipse.dir}/${eclipse.src.dir}" description="Directory for source libraries only needed by eclipse" />
  <property name="eclipse.javadocdir" location="${eclipse.dir}/${eclipse.javadoc.dir}" description="Directory for JavaDoc libraries only needed by eclipse" />
  <property name="eclipse.dependencies.copy" value="true" description="Defines if dependencies should be resolved, i.e. copied into the eclipse folder of the project, if not resolved the .classpath file will be created using absolute locations" />
  <property name="eclipse.dependencies.useM2Repo" value="true" description="Defines if the dependencies should be resolved against the M2_REPO variable (only if ${eclipse.dependencies.copy} is false and if the dependency was resolved against the defined maven repository)" />
  <property name="eclipse.dependencies.mavenRepoPlaceholder" value="M2_REPO" description="Defines the name of the variable used in Eclipse for the maven Repository location, only used if ${eclipse.dependencies.useM2Repo} is true and ${eclipse.dependencies.copy} is false" />

  <!--
    add the antcontrib and ant-processenabler library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  <taskdef resource="net/meisen/ant/tasks/antlib.xml" />
  
  <defineHook name="eclipseModifyProjectFile">
		<attribute name="file" />
	</defineHook>
  
  <defineHook name="eclipseModifyClasspathFile">
		<attribute name="file" />
	</defineHook>
  
  <defineHook name="eclipseCreateSettings">
    <attribute name="settingsdir" />
	</defineHook>
  
  <defineHook name="eclipseCreateLauncher">
    <attribute name="launcherdir" />
	</defineHook>
  
  <macrodef name="eclipseResolveDependencies">
    <attribute name="fileset" default="eclipse.tmp.dependencies" />
    <attribute name="sourcesFileset" default="eclipse.tmp.srcDependencies" />
    <attribute name="javadocFileset" default="eclipse.tmp.javaDocDependencies" />
    
    <sequential>
      <var name="eclipse.tmp.pomFile" value="${main.tmpdir}/merged_pomEclipse.xml" />
      <eclipseCreatePomFile pomFile="${eclipse.tmp.pomFile}" />
      
      <mavenResolveDependencies scope="test" pomfile="${eclipse.tmp.pomFile}" fileset="@{fileset}" 
                                                                              sourcesFileset="@{sourcesFileset}" 
                                                                              javadocFileset="@{javadocFileset}" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreatePomFile - creates the pom-file which contains all dependencies of Eclipse
    -->
  <macrodef name="eclipseCreatePomFile">
    <attribute name="pomFile" default="${main.tmpdir}/merged_pomEclipse.xml" />

    <sequential>
      <if>
        <available file="${basedir}/pomEclipse.xml"/>
        <then>
          <!-- check if we have a pom to be merged and merge it -->
          <fileMergeXml file1="${basedir}/pom.xml" 
                        file2="${basedir}/pomEclipse.xml" 
                        dest="@{pomFile}" 
                        conf="${eclipse.library.resfile.maven.eclipseMerge}" />
          <fileReplaceAllProperties file="@{pomFile}" destFile="@{pomFile}" />
        </then>
        <else>
          <copy file="${basedir}/pom.xml" tofile="@{pomFile}" overwrite="true" />
        </else>
      </if>
    </sequential>
  </macrodef>

  
  <!--
    eclipseCopyDependencies - creates an _eclipse folder which contains all needed libs
    -->
  <macrodef name="eclipseCopyDependencies">   

    <sequential>
      <var name="eclipse.tmp.pomFile" value="${main.tmpdir}/merged_pomEclipse.xml" />
      <eclipseCreatePomFile pomFile="${eclipse.tmp.pomFile}" />

      <!-- clean the folders -->
      <fileCleanUp dir="${eclipse.libdir}" recreate="true" failonerror="false" />
      <fileCleanUp dir="${eclipse.srcdir}" recreate="true" />
      <fileCleanUp dir="${eclipse.javadocdir}" recreate="true" />
      
      <!-- load the dependencies -->
      <mavenCopyDependencies pomfile="${eclipse.tmp.pomFile}" dir="${eclipse.libdir}" srcDir="${eclipse.srcdir}" javaDocDir="${eclipse.javadocdir}" scope="test" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreateProject - creates a .project file used within eclipse to load the project
    -->
  <macrodef name="eclipseCreateProject">   
    <attribute name="template" default="" />
    <attribute name="destination" default="${basedir}/.project" />
    <sequential>
      <!-- if no template is passed use the one set -->
      <if>
        <equals arg1="@{template}" arg2="" />
        <then>
          <var name="eclipse.tmp.template.project" value="${eclipse.template.project}" />
        </then>
        <else>
          <var name="eclipse.tmp.template.project" value="@{template}" />
        </else>
      </if>
    
      <!-- get the pom settings -->
      <mavenSetPom />
      
      <!-- trigger the defined hooks -->
      <copy file="${eclipse.tmp.template.project}" tofile="@{destination}" overwrite="true" />
      <triggerHooks name="eclipseModifyProjectFile">
        <attributeValue name="file" value="@{destination}" />
      </triggerHooks>
      
      <!-- replace the properties -->
      <fileReplaceAllProperties file="@{destination}" destFile="@{destination}" />
    </sequential>
  </macrodef>
  
  <macrodef name="eclipseAddAttributeToClassPath">
    <attribute name="attributename" />
    <attribute name="attributevalue" />
    <attribute name="classpathentry" />
    <attribute name="classpathfile" default="${basedir}/.classpath" />
  
    <sequential>
      <var name="eclipse.tmp.attributename" value="@{attributename}" />
      <var name="eclipse.tmp.attributevalue" value="@{attributevalue}" />
      <var name="eclipse.tmp.classpathentry" value="@{classpathentry}" />
      <var name="eclipse.tmp.classpathfile" value="@{classpathfile}" />
      
      <var name="eclipse.tmp.mergeCommand" unset="true" />
      
      <script language="javascript"><![CDATA[
        var s = java.lang.System.getProperty("line.separator");
        
        var attributename = project.getProperty("eclipse.tmp.attributename");
        var attributevalue = project.getProperty("eclipse.tmp.attributevalue");
        
        var source = project.getProperty("eclipse.tmp.classpathentry");
        var sourceFile = new java.io.File(source);
        var sourceName = sourceFile.getName();

        // get the xPath
        var xPath = "/classpath/classpathentry[@kind='lib' and (ends-with(@path,'/" + sourceName + "') or ends-with(@path,'\\" + sourceName + "'))]";
        
        // check if the file contains the dependency
        var xmlFile = new java.io.File(project.getProperty("eclipse.tmp.classpathfile"));
        var builder = new org.jdom.input.SAXBuilder();
        var doc = builder.build(xmlFile);
        var root = doc.getRootElement();
        
        // get the matches
        var matches = org.jdom.xpath.XPath.selectNodes(root, xPath);
        
        // create the entry
        var entry = "";
        if (matches.size() == 1) {
          entry += s + '\t' + "<classpathentry xpathmatcher:rule=\"" + xPath + "\">";
          entry += s + '\t' + '\t' + "<attributes>";
          entry += s + '\t' + '\t' + '\t' + "<attribute name=\"" + attributename + "\" value=\"" + attributevalue + "\"/>";
          entry += s + '\t' + '\t' + "</attributes>";
          entry += s + '\t' + "</classpathentry>";
          
          var setVar = project.createTask("var");
          setVar.setName("eclipse.tmp.mergeCommand"); setVar.setValue(entry); setVar.execute();                  
        }
      ]]></script>
      
      <if>
        <isset property="eclipse.tmp.mergeCommand" />
        <then>
          <!-- create the complete file to merge -->
          <var name="eclipse.tmp.mergeXml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;${line.separator}" />
          <var name="eclipse.tmp.mergeXml" value="${eclipse.tmp.mergeXml}&lt;classpath xmlns:xpathmatcher=&quot;http://ant-processenabler.meisen.net/schema/xpathmatcher&quot;&gt;" />
          <var name="eclipse.tmp.mergeXml" value="${eclipse.tmp.mergeXml}${eclipse.tmp.mergeCommand}${line.separator}" />
          <var name="eclipse.tmp.mergeXml" value="${eclipse.tmp.mergeXml}&lt;/classpath&gt;" />
          
          <!-- create a file with the merges -->
          <var name="eclipse.tmp.mergeXmlFile" value="${main.tmpdir}/eclipseMerger.xml" />
          <delete file="${eclipse.tmp.mergeXmlFile}" />
          <echo file="${eclipse.tmp.mergeXmlFile}" append="false">${eclipse.tmp.mergeXml}</echo>
          
          <!-- merge it -->
          <fileMergeXml file1="${eclipse.tmp.classpathfile}" 
                        file2="${eclipse.tmp.mergeXmlFile}" 
                        dest="${eclipse.tmp.classpathfile}" 
                        conf="${eclipse.library.resfile.eclipse.classpathMerge}" />
        </then>
        <else>
          <fileInfo file="${eclipse.tmp.classpathentry}" />
          <echo level="warn">The '${fileInfo.name}' is not available on the classpath, therefore the attribute cannot be added.</echo>
        </else>
      </if>
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreateClassPath - creates a .classpath file used within eclipse to define the classpath
    -->
  <macrodef name="eclipseCreateClassPath">
    <attribute name="addDependenciesFilesetId" default="" />
    <attribute name="template" default="" />
    <attribute name="destination" default="${basedir}/.classpath" />

    <sequential>
      
      <!-- if no template is passed use the one set -->
      <if>
        <equals arg1="@{template}" arg2="" />
        <then>
          <var name="eclipse.tmp.template.classpath" value="${eclipse.template.classpath}" />
        </then>
        <else>
          <var name="eclipse.tmp.template.classpath" value="@{template}" />
        </else>
      </if>
    
      <!-- get all the libraries needed -->
      <if>
        <or><equals arg1="${eclipse.dependencies.copy}" arg2="y" /><equals arg1="${eclipse.dependencies.copy}" arg2="yes" /><equals arg1="${eclipse.dependencies.copy}" arg2="true" /></or>
        <then>
          <var name="eclipse.dependencies.copy" value="true" />
          <eclipseCopyDependencies />
          
          <!-- copy further files if specified -->
          <if>
            <not><equals arg1="@{addDependenciesFilesetId}" arg2="" /></not>
            <then>
            
              <!-- copy the dependent files -->
              <copy todir="${eclipse.libdir}">
                <fileset refid="@{addDependenciesFilesetId}" />
                <mapper type="flatten" />
              </copy>
            </then>
          </if>
      
          <!-- get all the libraries -->
          <fileset id="eclipse.tmp.libs" dir="${eclipse.libdir}">
            <include name="*.jar" />
          </fileset>
        </then>
        <else>
          <!-- check the M2 setting -->
          <if>
            <or><equals arg1="${eclipse.dependencies.useM2Repo}" arg2="y" /><equals arg1="${eclipse.dependencies.useM2Repo}" arg2="yes" /><equals arg1="${eclipse.dependencies.useM2Repo}" arg2="true" /></or>
            <then><var name="eclipse.dependencies.useM2Repo" value="true" /></then>
            <else><var name="eclipse.dependencies.useM2Repo" value="false" /></else>
          </if>
        
          <var name="eclipse.dependencies.copy" value="false" />
          <eclipseResolveDependencies fileset="eclipse.tmp.libs" />
          
          <!-- add additional dependencies if defined -->
          <if>
            <not><equals arg1="@{addDependenciesFilesetId}" arg2="" /></not>
            <then>
              <fileCombineFilesets filesetid="eclipse.tmp.libs">
                <fileset refid="eclipse.tmp.libs" />
                <fileset refid="@{addDependenciesFilesetId}" />
              </fileCombineFilesets>
            </then>
          </if>
        </else>
      </if>
      
      <!-- Create the classpath for the project
        &#xA;  -> is a newline
        &#x9;  -> is a tabulator
        &quot; -> is a "
        &gt;   -> is a >
        &lt;   -> is a <
        -->
      <!--
        - relative path:
      	<classpathentry kind="lib" path="_eclipse/lib/ojdbc14-10.1.0.5.jar" sourcepath="">
          <attributes>
            <attribute name="javadoc_location" value="jar:platform:/resource/[projectname]/_eclipse" />
          </attributes>
        </classpathentry>
        
        - absolute path:
        <classpathentry kind="lib" path="C:/Users/pmeisen/.m2/repository/ch/elca/el4j/modules/ant-module-xmlMerge/3.1/ant-module-xmlMerge-3.1.jar"/>
        
        - with M2_REPO:
        <classpathentry kind="var" path="M2_REPO/cglib/cglib-nodep/2.1_3/cglib-nodep-2.1_3.jar" sourcepath="M2_REPO/c3p0/c3p0/0.9.1/c3p0-0.9.1-sources.jar">
          <attributes>
            <attribute name="javadoc_location" value="jar:file:/P:/.m2/repository/ch/elca/el4j/modules/ant-module-xmlMerge/3.1/ant-module-xmlMerge-3.1.jar!/"/>
          </attributes>
        </classpathentry>
        -->
      <mavenSetPom />
      <pathconvert pathsep="${line.separator}" property="eclipse.tmp.classpath" refid="eclipse.tmp.libs">
        <scriptmapper language="javascript">
            <![CDATA[
            // get some meta settings to define how the classpath file looks like
            var filesCopied = self.getProject().getProperty("eclipse.dependencies.copy").equals("true");
            var useM2Repo = self.getProject().getProperty("eclipse.dependencies.useM2Repo").equals("true");
            
            // get some values about the library file
            var s = java.lang.System.getProperty("line.separator");
            var libFile = new java.io.File(source);
            var jarName = "" + libFile.getName();
            var jarLocation = libFile.getParent();
            var jarPos = -1;

            var eclipseIndicator = "-" + self.getProject().getProperty("maven.attachment.fullcompiled");
            var eclipseJarIndicator = eclipseIndicator + ".jar";
            
            if (jarName.indexOf(eclipseJarIndicator, jarName.length - eclipseJarIndicator.length) != -1) {
              jarPos = jarName.lastIndexOf(eclipseJarIndicator);
            } else {
              jarPos = jarName.lastIndexOf(".jar");
            }
                        
            if (jarPos > -1) {
              
              // get some properties we need to create the classpath
              var projectName = self.getProject().getProperty("maven.pom.artifactId");
            
              // get the names of the source and javadoc file
              var srcFileName = jarName.substring(0, jarPos) + "-sources.jar";
              var javaDocFileName = jarName.substring(0, jarPos) + "-javadoc.jar";
  
              // depending on the settings we have to get some values
              var sourcePath = null;
              var javaDocPath = null;
              var kind = null;
              var path = null;
              if (filesCopied) {
              
                // get the eclipse properties
                var eclipseDirName = self.getProject().getProperty("eclipse.eclipse.dir");
                var libDirName = self.getProject().getProperty("eclipse.lib.dir");
                var srcDirName = self.getProject().getProperty("eclipse.src.dir");
                var javaDocDirName = self.getProject().getProperty("eclipse.javadoc.dir");
              
                // get the path
                path = eclipseDirName + "/" + libDirName + "/" + jarName;
              
                // get the details of sourcePath
                var srcDir = self.getProject().getProperty("eclipse.srcdir");
                var srcFile = new java.io.File(srcDir, srcFileName);
                if (srcFile.exists() && srcFile.isFile()) {
                  sourcePath = eclipseDirName + "/" + srcDirName + "/" + srcFile.getName();
                }
                
                // get the details of javaDocPath
                var javadocDir = self.getProject().getProperty("eclipse.javadocdir");
                var javaDocFile = new java.io.File(javadocDir, javaDocFileName);
                if (javaDocFile.exists() && javaDocFile.isFile()) {
                  javaDocPath = "jar:platform:/resource/" + projectName + "/" + eclipseDirName + "/" + javaDocDirName + "/" + javaDocFile.getName();
                }
                
                // set the kind
                kind = "lib";

              } else {
              
                // get the path
                path = source;
                path = new java.lang.String(path).replace("\\", "/");
                
                // get the details of sourcePath
                var srcFile = new java.io.File(jarLocation, srcFileName);
                if (srcFile.exists() && srcFile.isFile()) {
                  sourcePath = jarLocation + "/" + srcFile.getName();
                  sourcePath = new java.lang.String(sourcePath).replace("\\", "/");
                }
                
                // get the details of javaDocPath
                var javaDocFile = new java.io.File(jarLocation, javaDocFileName);
                if (javaDocFile.exists() && javaDocFile.isFile()) {
                  var javaDocPrefix = jarLocation.startsWith("\\") || jarLocation.startsWith("/") ? "" : "/";
                  javaDocPath = "jar:file:" + javaDocPrefix + jarLocation + "/" + javaDocFile.getName();
                  javaDocPath = new java.lang.String(javaDocPath).replace("\\", "/");
                }
                
                // set the kind
                kind = useM2Repo ? "var" : "lib";
                
                // replace the M2Repo if asked for
                if (useM2Repo) {
                  var localRepo = self.getProject().getProperty("maven.repository.local");
                  var localRepoDir = new java.io.File(localRepo);
                  localRepoDir = new java.lang.String(localRepoDir.getCanonicalPath()).replace("\\", "/");
                
                  var m2repoPlaceholder = self.getProject().getProperty("eclipse.dependencies.mavenRepoPlaceholder");
                  path = path.replaceFirst(localRepoDir, m2repoPlaceholder);
                  sourcePath = sourcePath == null ? null : sourcePath.replaceFirst(localRepoDir, m2repoPlaceholder);
                }
              }
                
              // create the entry
              var entry = "<classpathentry kind=\"" + kind + "\" ";
              entry += "path=\"" + path + "\" ";
              
              // add the sourcePath
              if (sourcePath != null) {
                entry += "sourcepath=\"" + sourcePath + "\" ";
              }
              entry += ">" + '\n';
              
              // add the javadoc
              if (javaDocPath != null) {
                entry += '\t' + '\t' + "<attributes>" + s;
                entry += '\t' + '\t' + '\t' + "<attribute name=\"javadoc_location\" ";
                entry += "value=\"" + javaDocPath + "!/\" ";
                entry += "/>" + s;
                entry += '\t' + '\t' + "</attributes>" + s;
              }
              
              // finish the entry
              entry += '\t' + "</classpathentry>" + s;
              
              // add it as mapping result
              self.addMappedName(entry);
            }
            ]]>
        </scriptmapper>
      </pathconvert> 
      
      <!-- set the excluded sources -->
      <transformPackagesToPath property="eclipse.tmp.srcExcludes" 
                               packages="${build.package.excludes}" suffix="/" packageSeparatore="/" separatore="|" />

      <!-- replace the properties -->
      <copy file="${eclipse.tmp.template.classpath}" tofile="@{destination}" overwrite="true" />
      <fileReplaceAllProperties file="@{destination}" destFile="@{destination}" />
                               
      <!-- trigger the modification of the file -->
      <triggerHooks name="eclipseModifyClasspathFile">
        <attributeValue name="file" value="@{destination}" />
      </triggerHooks>

      <!-- replace the properties again after the hook -->
      <fileReplaceAllProperties file="@{destination}" destFile="@{destination}" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreateDirectories - creates the directories as needed by eclipse
    -->
  <macrodef name="eclipseCreateDirectories">   

    <sequential>
      <mkdir dir="${eclipse.dir}/${build.binary.dir}" />
      <mkdir dir="${build.srcdir}" />
      <mkdir dir="${build.resourcedir}" />
      <mkdir dir="${test.srcdir}" />
      
      <mkdir dir="${eclipse.settings.dir}" />
      <mkdir dir="${eclipse.launcher.dir}" />
    </sequential>
  </macrodef>
  
  <macrodef name="eclipseCreateSettings">
    <attribute name="filename" default="" />
    
    <sequential>
      <!-- get the default if nothing is specified -->
      <varEmpty property="eclipse.tmp.settingsdir" value="@{filename}" default="${eclipse.settings.dir}" />
      
      <!-- trigger the hooks -->
      <triggerHooks name="eclipseCreateSettings">
        <attributeValue name="settingsdir" value="${eclipse.tmp.settingsdir}" />
      </triggerHooks>
    </sequential>
  </macrodef>
  
  <macrodef name="eclipseCreateSettingsFromPackage">
    <attribute name="packagefolder" />
    <attribute name="filename" />
    <attribute name="location" default="" />
    <attribute name="packageprefix" default="eclipsePlugIn_" />
    <attribute name="replaceproperties" default="true" />
    
    <sequential>
      <!-- the properties will be marked with a prefix to be removeable after success -->
      <var name="eclipse.tmp.packageproperties.prefix" value="eclipseCreateSettingsFromPackage" />
      <propertyset id="eclipse.tmp.packageproperties">
        <propertyref prefix="${eclipse.tmp.packageproperties.prefix}."/>
      </propertyset>
      
      <!-- unset all the properties, might be set somehow -->
      <unsetProperties propertySetId="eclipse.tmp.packageproperties" />
    
      <!-- get the directory to place the settings at, default is the defined location -->
      <varEmpty property="eclipse.tmp.settingslocation" value="@{location}" default="${eclipse.settings.dir}" />
      <mkdir dir="${eclipse.tmp.settingslocation}" />
      
      <!-- get all the files of the package and process those -->
      <for param="propertyfile">
        <path>
          <fileset id="eclipse.tmp.packagefiles" dir="@{packagefolder}">
            <include name="@{packageprefix}*.properties" />
          </fileset>
        </path>
        <sequential>
          <var name="eclipse.tmp.propertyPrefix" unset="true" />
        
          <!-- first remove the prefix -->
          <fileInfo file="@{propertyfile}" />
          <propertyregex property="eclipse.tmp.propertyPrefix" input="${fileInfo.name}" regexp="@{packageprefix}(.*)\.properties" select="\1" casesensitive="false" />
          
          <!-- if it's not the default we have to look for local properties -->
          <if>
            <not><equals arg1="${eclipse.tmp.propertyPrefix}" arg2="default" /></not>
            <then>
              <!-- get the local, i.e. already defined properties -->
              <propertyset id="eclipse.tmp.predefinedproperties">
                <propertyref prefix="${eclipse.tmp.propertyPrefix}."/>
              </propertyset>
              
              <!-- add the marker prefix -->
              <modifyProperties prefix="${eclipse.tmp.packageproperties.prefix}" propertySetId="eclipse.tmp.predefinedproperties" prefixhandling="add" />
            </then>
          </if>
          
          <!-- now load the properties of the file -->
          <loadproperties srcFile="@{propertyfile}" prefix="${eclipse.tmp.packageproperties.prefix}" />
        </sequential>
      </for>
            
      <!-- replace all properties in those which are defined -->
      <varNormalizeBoolean property="eclipse.tmp.replaceproperties" value="@{replaceproperties}" />
      <if>
        <equals arg1="${eclipse.tmp.replaceproperties}" arg2="true" />
        <then>
          <replacePropertiesInProperties propertySetId="eclipse.tmp.packageproperties" />
        </then>
      </if>

      <!-- get all the properties and write those to a file -->
      <echoproperties destfile="${eclipse.tmp.settingslocation}/@{filename}">
        <propertyset>
          <propertyref prefix="${eclipse.tmp.packageproperties.prefix}."/>
          <mapper type="glob" from="${eclipse.tmp.packageproperties.prefix}.*" to="*"/>
        </propertyset>
      </echoproperties>
      
      <!-- unset all the properties so that these don't disturb anymore -->
      <unsetProperties propertySetId="eclipse.tmp.packageproperties" />
    </sequential>
  </macrodef>
  
  <macrodef name="eclipseCreateLauncher">    
    <sequential>
      <triggerHooks name="eclipseCreateLauncher">
        <attributeValue name="launcherdir" value="${eclipse.launcher.dir}" />
      </triggerHooks>
    </sequential>
  </macrodef>
  
  <!-- the targets provided by this lib -->
  <target name="createDevEnv">
    <eclipseCreateDirectories />
    <eclipseCreateProject />
    <eclipseCreateClassPath />
    
    <eclipseCreateSettings />
    <eclipseCreateLauncher />
  </target>
</project>