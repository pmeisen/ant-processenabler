<!--
  Library which adds some macros and targets for file operations/modifications
  
  Created on: 01.03.2012
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    01.03.2012
      - Creation of library
  -->
<project name="library_eclipse">
  <property name="eclipse.library.version" value="1.2.0" description="The current version of the library" />
  <dirname property="library_eclipse.basedir" file="${ant.file.library_eclipse}"/>
  
  <property name="eclipse.library.resfile.maven.eclipseMerge" location="${main.root}/maven/pomEclipse_xmlMerge.properties" />
  <property name="eclipse.library.resfile.template.project" location="${library_eclipse.basedir}/library_eclipse_project.template" description="The name of the project template" />
  <property name="eclipse.library.resfile.template.classpath" location="${library_eclipse.basedir}/library_eclipse_classpath.template" description="The name of the classpath template" />
  
  <property name="eclipse.eclipse.dir" value="_eclipse" description="Project binary directory" />
  <property name="eclipse.lib.dir" value="lib" description="Project binary directory" />
  <property name="eclipse.src.dir" value="src" description="Project source directory" />
  <property name="eclipse.javadoc.dir" value="javadoc" description="Project JavaDoc directory" />
  <property name="eclipse.settings.dir" value=".settings" description="Settings dir of eclipse" />
  <property name="eclipse.launcher.dir" value=".launcher" description="Launcher dir of eclipse" />
  <property name="eclipse.dir" location="${eclipse.eclipse.dir}" description="Directory for files only needed by eclipse" />
  <property name="eclipse.libdir" location="${eclipse.dir}/${eclipse.lib.dir}" description="Directory for libraries only needed by eclipse" />
  <property name="eclipse.srcdir" location="${eclipse.dir}/${eclipse.src.dir}" description="Directory for source libraries only needed by eclipse" />
  <property name="eclipse.javadocdir" location="${eclipse.dir}/${eclipse.javadoc.dir}" description="Directory for JavaDoc libraries only needed by eclipse" />

  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  
  <macrodef name="eclipseResolveDependencies">
    <attribute name="fileset" default="eclipse.tmp.dependencies" />
    <attribute name="sourcesFileset" default="eclipse.tmp.srcDependencies" />
    <attribute name="javadocFileset" default="eclipse.tmp.javaDocDependencies" />
    
    <sequential>
      <if>
        <available file="${basedir}/pomEclipse.xml"/>
        <then>
          <!-- check if we have a pom to be merged and merge it -->
          <fileMergeXml file1="${basedir}/pom.xml" 
                        file2="${basedir}/pomEclipse.xml" 
                        dest="${build.tmpdir}/merged_pomEclipse.xml" 
                        conf="${eclipse.library.resfile.maven.eclipseMerge}" />
          <fileReplaceAllProperties file="${build.tmpdir}/merged_pomEclipse.xml" destFile="${build.tmpdir}/merged_pomEclipse.xml" />
        </then>
        <else>
          <copy file="${basedir}/pom.xml" tofile="${build.tmpdir}/merged_pomEclipse.xml" />
        </else>
      </if>
      
      <mavenResolveDependencies scope="test" pomfile="${build.tmpdir}/merged_pomEclipse.xml" fileset="@{fileset}" 
                                                                                             sourcesFileset="@{sourcesFileset}" 
                                                                                             javadocFileset="@{javadocFileset}" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCopyDependencies - creates an _eclipse folder which contains all needed libs
    -->
  <macrodef name="eclipseCopyDependencies">   

    <sequential>
      <if>
        <available file="${basedir}/pomEclipse.xml"/>
        <then>
          <!-- check if we have a pom to be merged and merge it -->
          <fileMergeXml file1="${basedir}/pom.xml" 
                        file2="${basedir}/pomEclipse.xml" 
                        dest="${build.tmpdir}/merged_pomEclipse.xml" 
                        conf="${eclipse.library.resfile.maven.eclipseMerge}" />
          <fileReplaceAllProperties file="${build.tmpdir}/merged_pomEclipse.xml" destFile="${build.tmpdir}/merged_pomEclipse.xml" />
        </then>
        <else>
          <copy file="${basedir}/pom.xml" tofile="${build.tmpdir}/merged_pomEclipse.xml" overwrite="true" />
        </else>
      </if>

      <!-- clean the folders -->
      <fileCleanUp dir="${eclipse.libdir}" recreate="true" failonerror="false" />
      <fileCleanUp dir="${eclipse.srcdir}" recreate="true" />
      <fileCleanUp dir="${eclipse.javadocdir}" recreate="true" />
      
      <!-- load the dependencies -->
      <mavenCopyDependecies pomfile="${build.tmpdir}/merged_pomEclipse.xml" dir="${eclipse.libdir}" srcDir="${eclipse.srcdir}" javaDocDir="${eclipse.javadocdir}" scope="test" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreateProject - creates a .project file used within eclipse to load the project
    -->
  <macrodef name="eclipseCreateProject">   
    <attribute name="template" default="${eclipse.library.resfile.template.project}" />
    <sequential>
      <!-- get the pom settings -->
      <mavenSetPom />

      <!-- replace the properties -->
      <fileReplaceAllProperties file="@{template}" destFile="${basedir}/.project" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreateClassPath - creates a .classpath file used within eclipse to define the classpath
    -->
  <macrodef name="eclipseCreateClassPath">
    <attribute name="addDependencies" default="" />
    <attribute name="template" default="${eclipse.library.resfile.template.classpath}" />

    <sequential>
    
      <!-- get all the libraries needed -->
      <eclipseCopyDependencies />
      
      <!-- copy further files if specified -->
      <if>
        <not><equals arg1="@{addDependencies}" arg2="" /></not>
        <then>
        
          <!-- copy the dependent files -->
          <copy todir="${eclipse.libdir}">
            <fileset refid="@{addDependencies}" />
            <mapper type="flatten" />
          </copy>
        </then>
      </if>
      
      <!-- get the pom settings -->
      <mavenSetPom />

      <!-- get all the libraries -->
      <fileset id="eclipse.tmp.libs" dir="${eclipse.libdir}">
        <include name="*.jar" />
      </fileset>
      
      <!-- Create the classpath for the project
        &#xA;  -> is a newline
        &#x9;  -> is a tabulator
        &quot; -> is a "
        &gt;   -> is a >
        &lt;   -> is a <
        -->
      <!--
      	<classpathentry kind="lib" path="_eclipse/lib/ojdbc14-10.1.0.5.jar" sourcepath="">
          <attributes>
            <attribute name="javadoc_location" value="" />
          </attributes>
        </classpathentry>
        -->
      <pathconvert pathsep="&#xA;&#x9;" property="eclipse.tmp.classpath" refid="eclipse.tmp.libs">
        <scriptmapper language="javascript">
            <![CDATA[

            // get some values about the library file
            var libFile = new java.io.File(source);
            var jarName = "" + libFile.getName();
            var jarPos = -1;

            var eclipseIndicator = "-" + self.getProject().getProperty("maven.attachment.fullcompiled");
            var eclipseJarIndicator = eclipseIndicator + ".jar";
            
            if (jarName.indexOf(eclipseJarIndicator, jarName.length - eclipseJarIndicator.length) != -1) {
              jarPos = jarName.lastIndexOf(eclipseJarIndicator);
            } else {
              jarPos = jarName.lastIndexOf(".jar");
            }
            
            if (jarPos > -1) {
              // get the eclipse properties
              var eclipseDirName = self.getProject().getProperty("eclipse.eclipse.dir");
              var libDirName = self.getProject().getProperty("eclipse.lib.dir");
              var srcDirName = self.getProject().getProperty("eclipse.src.dir");
              var javaDocDirName = self.getProject().getProperty("eclipse.javadoc.dir");
              var projectName = self.getProject().getProperty("maven.pom.artifactId");
            
              // get the locations defined
              var srcDir = self.getProject().getProperty("eclipse.srcdir");
              var javadocDir = self.getProject().getProperty("eclipse.javadocdir");
              
              // get the names of the source and javadoc file
              var srcFileName = jarName.substring(0, jarPos) + "-sources.jar";
              var javaDocFileName = jarName.substring(0, jarPos) + "-javadoc.jar";
              
              // now create file objects to check if those are available
              var srcFile = new java.io.File(srcDir, srcFileName);
              var javaDocFile = new java.io.File(javadocDir, javaDocFileName);
              
              // create the entry
              var entry = "<classpathentry kind=\"lib\" ";
              entry += "path=\"" + eclipseDirName + "/" + libDirName + "/" + jarName + "\" ";
              
              // add the sourcepath
              if (srcFile.exists() && srcFile.isFile()) {
                entry += "sourcepath=\"" + eclipseDirName + "/" + srcDirName + "/" + srcFile.getName() + "\" ";
              }
              entry += ">" + '\n';
              
              // add the javadoc
              if (javaDocFile.exists() && javaDocFile.isFile()) {
                entry += '\t' + '\t' + "<attributes>" + '\n';
                entry += '\t' + '\t' + '\t' + "<attribute name=\"javadoc_location\" ";
                entry += "value=\"jar:platform:/resource/" + projectName + "/" + eclipseDirName + "/" + javaDocDirName + "/" + javaDocFile.getName() + "!/\" ";
                entry += "/>" + '\n';
                entry += '\t' + '\t' + "</attributes>" + '\n';
              }
              
              // finish the entry
              entry += '\t' + "</classpathentry>";
              
              // add it as mapping result
              self.addMappedName(entry);
            }
            ]]>
        </scriptmapper>
      </pathconvert>
      
      <!-- set the excluded sources -->
      <transformPackagesToPath property="eclipse.tmp.srcExcludes" 
                               packages="${build.package.excludes}" suffix="/" packageSeparatore="/" separatore="|" />

      <!-- replace the properties -->
      <fileReplaceAllProperties file="@{template}" destFile="${basedir}/.classpath" />
    </sequential>
  </macrodef>
  
  <!--
    eclipseCreateDirectories - creates the directories as needed by eclipse
    -->
  <macrodef name="eclipseCreateDirectories">   

    <sequential>
      <mkdir dir="${eclipse.dir}/${build.binary.dir}" />
      <mkdir dir="${build.srcdir}" />
      <mkdir dir="${build.resourcedir}" />
      <mkdir dir="${test.srcdir}" />
      
      <mkdir dir="${eclipse.settings.dir}" />
      <mkdir dir="${eclipse.launcher.dir}" />
    </sequential>
  </macrodef>
  
  <!-- the targets provided by this lib -->
  <target name="createDevEnv">
    <eclipseCreateDirectories />
    <eclipseCreateProject />
    <eclipseCreateClassPath />
  </target>
</project>