<!--
  Common library which should be added to each project-build to have some commonly 
  needed functionality
  
  Created on: 01.03.2012
  Created by: Philipp Meisen <philipp@meisen.net>
  History:
    01.03.2012
      - Creation of library
    03.01.2013
      - modified loading order of properties
  -->
<project name="library_main" basedir=".">
  <property name="main.library.version" value="1.0.5" description="The current version of the library" />
  <dirname property="library_main.basedir" file="${ant.file.library_main}"/>
  <property name="main.root" location="${library_main.basedir}\..\" />

  <!-- resource files needed by this module -->
  <property name="main.library.resfile.build.example" location="${main.root}/build.xml" />
  <property name="main.library.resfile.config.example" location="${main.root}/ant/settings.properties.example" />
  <property name="main.library.resfile.config.user.example" location="${main.root}/ant/config.properties.example" />
  <property name="main.library.resfile.config.general.example" location="${main.root}/ant/scriptconfig.properties.example" />
  <property name="main.library.resfile.config.libraries" location="${main.root}/ant/libraryconfig.properties" />
  <property name="main.library.resfile.js.general" location="${main.root}/javascripts/library_main/general.js" description="JavaScript with some helper methods" />

  <!-- Load the library configuration -->
  <property file="${main.library.resfile.config.libraries}" />
  
  <!-- Load the properties for the main library which might be specified -->
  <property name="main.config.default" location="${main.root}/ant/settings.properties" />
  <property file="${main.config.default}" />
  
  <!-- load also the project specific properties now, because those could overwrite the location of the configuration -->
  <property name="main.config.project.user" location="${basedir}/override.properties" />
  <property name="main.config.project.marked" location="${basedir}/marked.properties" />
  <property name="main.config.project" location="${basedir}/config.properties" />
  <!-- Load the user-specific override.properties of the project -->
  <property file="${main.config.project.user}" />
  <!-- Load the properties which were marked prior to execution somewhen, i.e. marked.properties of the project -->
  <property file="${main.config.project.marked}" />
  <!-- Load the config.properties of the project the main is used in -->
  <property file="${main.config.project}" />
  
  <!-- the default location of the configuration -->
  <property name="main.config.location" location="${main.root}/ant/" />
  
  <!-- load further properties -->
  <property name="main.config.user.default" location="${main.config.location}/config.properties" />
  <property name="main.config.general.default" location="${main.config.location}/scriptconfig.properties" />
  
  <!-- Load the user properties for the main library which might be specified -->
  <property file="${main.config.user.default}" />
  <!-- Load the general properties for the main library which might be specified -->
  <property file="${main.config.general.default}" />

  <!--
    set some properties which are globally of interest and can be used by all libraries
    -->
  <property name="main.markedProperties.prefix" value="" description="A prefix can be defined which marks a property to be loaded without the prefix, e.g. myPrefix.sample.property=5 should be known by the system with sample.property=5" />
  <property name="main.vendor" value="" description="The vendor used for compiled/build versions" />
  <property name="main.tmpIndicatorFile" value="created.tmp" description="File which is created in the temporary directory for this ant-call" />
  <property name="main.tmplocation" location="${java.io.tmpdir}/ant-processenabler" description="The temporary folder which contains all session, use 'main.tmpdir'-property for all temporary data of a session" />
  <property name="main.tmpdir" value="" description="The temporary folder which should be used by all libraries when generating temporary content" />
  <property name="main.timeoutCreationInDays" value="1" description="Defines when a creation process should be assumed as timed-out, i.e. when the process should be cleanup" />
  <property name="main.logLevel" value="error" description="The logging level to be used can be error, warn, info, verbose, debug" />
  <property name="main.addExtensionsByDefault" value="false" description="Adds all defined extension automatically if set to true, otherwise extensions have to be explicitly added" />

  <property name="main.init" value="false" description="For internal usage only, please do not modify this property by a file" />
  
  <!--
    add the antcontrib library
    -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  
  <!--
    initialize - do some things that have to be done
    -->
  <if>
    <equals arg1="${main.init}" arg2="false" />
    <then>
      <!-- set timestamps DSTAMP, TSTAMP, and TODAY -->
      <tstamp>
        <format property="NOW" pattern="dd.MM.yyyy HH:mm:ss" />
      </tstamp>
    
      <!-- make sure we have the temporary folder -->
      <mkdir dir="${main.tmplocation}" />
      
      <!-- core libraries may need some temporary data to, but we don't have more right now -->
      <var name="main.tmpdir" value="${main.tmplocation}" />

      <!-- core must be added here before any other functionality can be used -->
      <for list="${main.import.order.core}" param="main.core.library">
        <sequential>
          <var name="main.core.library.relfile" value="" unset="true" />
          <propertycopy name="main.core.library.relfile" from="main.library.file.@{main.core.library}" />
          <var name="main.core.library.file" value="${main.root}/ant/${main.core.library.relfile}" />
          
          <echo level="debug">Importing core library: ${main.core.library.relfile}</echo>
          <import file="${main.core.library.file}" />
        </sequential>
      </for>
      
      <!-- cleanup all the old temp-directories -->
      <tstamp>
        <format property="main.tmp.backUpTime" pattern="MM/dd/yyyy hh:mm aa" locale="en,UK" offset="-${main.timeoutCreationInDays}" unit="day"/>
      </tstamp>
      <delete includeemptydirs="true" failonerror="false">
        <fileset dir="${main.tmplocation}" id="main.filesetid">
          <and>
            <date datetime="${main.tmp.backUpTime}" when="before" />
            <present present="both" targetdir="${main.tmplocation}">
              <regexpmapper from="^([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})($$|[/\\].*$$)" to="\1/${main.tmpIndicatorFile}"/>
            </present>
          </and>
        </fileset>
      </delete>
      
      <!-- generate a unique temp-directory -->
      <generateUUID property="main.tmpfolder" />
      <var name="main.tmpdir" value="${main.tmplocation}/${main.tmpfolder}" />
      <mkdir dir="${main.tmpdir}" />
      <touch file="${main.tmpdir}/${main.tmpIndicatorFile}" />
            
      <!-- there is a chance to pass properties to the system which are marked via a prefix which has to be removed now -->
      <if>
        <and>
          <isset property="main.markedProperties.prefix" />
          <not><equals arg1="${main.markedProperties.prefix}" arg2="" /></not>
        </and>
        <then>
          <modifyProperties prefix="${main.markedProperties.prefix}" resultPropertySetId="main.markedProperties.propertySet" 
                            setPropertiesWithoutPrefix="true" unsetProperties="true" skipPattern="^main\." />
        </then>
      </if>
      
      <!-- replace the loaded properties, e.g. if nested properties are used somewhere -->
      <propertyset id="main.tmp.propertiesSet">
        <propertyref regex=".*"/>
      </propertyset>
      <replacePropertiesInProperties propertySetId="main.tmp.propertiesSet" />
                
      <!-- define the loglevel -->
      <setLogLevel logLevel="${main.logLevel}" />
      
      <!-- add further additional libraries, be careful there are dependencies -->
      <importLibrariesFromList list="${main.import.order.extension}" default="${main.addExtensionsByDefault}" />
      
      <!-- add further additional libraries, be careful there are dependencies -->
      <importLibrariesFromList list="${main.import.order.general}" />
            
      <!-- make sure the proxy is checked and initialized -->
      <proxyEnable />
      
      <!-- the proxy is needed, maven depends on build! -->
      <importLibrariesFromList list="${main.import.order.proxy}" />
	    
      <!-- initialization finshed -->
      <var name="main.init" value="true" />
    </then>
  </if>
  
  <macrodef name="mainAvailable">
    <sequential>
      <echo level="debug">The main-ant-settings are imported successfully</echo>
    </sequential>
  </macrodef>
  
  <macrodef name="mainGetLibraries">
    <attribute name="property" />
    
    <sequential>
      <var name="main.tmp.mainLibrary" value="main" />
      
      <!-- get all the available libraries -->
      <var name="main.tmp.libraries" value="${main.tmp.mainLibrary}" />
      <appendList property="main.tmp.libraries" list1="${main.tmp.libraries}" list2="${main.import.order.core}" separator="," trimItems="true" />
      <appendList property="main.tmp.libraries" list1="${main.tmp.libraries}" list2="${main.import.order.extension}" separator="," trimItems="true" />
      <appendList property="main.tmp.libraries" list1="${main.tmp.libraries}" list2="${main.import.order.general}" separator="," trimItems="true" />
      <appendList property="main.tmp.libraries" list1="${main.tmp.libraries}" list2="${main.import.order.proxy}" separator="," trimItems="true" />
      
      <var name="@{property}" value="${main.tmp.libraries}" />
    </sequential>
  </macrodef>

  <target name="versions">
    <setLogLevel logLevel="INFO" />   
    <echoproperties regex="^.+\.library\.version$" />
    <setLogLevel logLevel="${main.logLevel}" />
  </target>
  
  <target name="folders">
    <setLogLevel logLevel="INFO" />   
    <echoproperties regex="^ant\.file\.library_.+$" />
    <setLogLevel logLevel="${main.logLevel}" />
  </target>
  
  <!-- target which cleans all steps run prior -->
  <target name="cleanUp">
    <if><typefound name="mavenCleanUp"/><then><mavenCleanUp /></then></if>
    <if><typefound name="buildCleanUp"/><then><buildCleanUp /></then></if>
    <if><typefound name="testCleanUp"/><then><testCleanUp /></then></if>
    <if><typefound name="updateCleanUp"/><then><updateCleanUp /></then></if>
    
    <!-- delete the session temporary folder -->
    <delete dir="${main.tmpdir}" failonerror="false" />
  </target>
  
  <target name="wrapUp">
    <allLibrariesFiles filesetid="main.tmp.appData" />
    <zip destfile="wrapUp.zip">
      <fileset refid="main.tmp.appData" />
    </zip>
  </target>
  
  <target name="removeMarkedProperties">
    <delete file="${main.config.project.marked}" />
  </target>
  
  <target name="writeMarkedProperties" description="lala">
    <if>
      <and>
        <isset property="main.markedProperties.prefix" />
        <not><equals arg1="${main.markedProperties.prefix}" arg2="" /></not>
      </and>
      <then>
        <echoproperties destfile="${main.config.project.marked}">
          <propertyset refid="main.markedProperties.propertySet" />
        </echoproperties>
      </then>
    </if>
  </target>
</project>